<!--- Generated by Module Generator, version 002.300.000 --->

	<!--- Begin Structure Population Functions --->

	<cffunction access='public' name='GC3_REPORT_PopulateObjectStructure' output='true' returntype='any'>
		<cfargument name='param_objectStructure' type='struct' required='no' default='#StructNew()#'>
		<cfargument name='param_secondaryStructure' type='struct' required='no' default='#StructNew()#'>
		<!--- begin function body --->
		<cfset var result = StructCopy(arguments.param_objectStructure)>
		<cfset var secondaryStructure = StructCopy(arguments.param_secondaryStructure)>

		<!--- secondary structure population --->
		<cfparam name='secondaryStructure.ExistsInDB' default='false'>
		<cfparam name='secondaryStructure.ID' default=''>
		<cfparam name='secondaryStructure.OWNER_ID' default=''>
		<cfparam name='secondaryStructure.ACTUAL_SUBMITTER_ID' default=''>
		<cfparam name='secondaryStructure.TITLE' default=''>
		<cfparam name='secondaryStructure.DATE_BEGIN' default=''>
		<cfparam name='secondaryStructure.DATE_END' default=''>
		<cfparam name='secondaryStructure.COUNTY_ID' default=''>
		<cfparam name='secondaryStructure.SCOPE_ID' default=''>
		<cfparam name='secondaryStructure.ACTIVITY_LOCATION_TYPE_ID' default=''>
		<cfparam name='secondaryStructure.ACTIVITY_LOCATION_ALTERNATE_TEXT' default=''>
		<cfparam name='secondaryStructure.DATE_CREATED' default=''>
		<cfparam name='secondaryStructure.DATE_LAST_UPDATED' default=''>

		<cfloop list="#StructKeyList(secondaryStructure)#" index="thisItem">
			<cfparam name="result.#thisItem#" default="#secondaryStructure[thisItem]#" >
		</cfloop>

		<cfreturn result>
		<!--- end function body --->
	</cffunction>

	<cffunction access='public' name='GC3_REPORT_PopulateCriteriaStructure' output='true' returntype='any'>
		<cfargument name='param_criteriaStructure' type='struct' required='no' default='#StructNew()#'>
		<cfargument name='param_secondaryStructure' type='struct' required='no' default='#StructNew()#'>
		<!--- begin function body --->
		<cfset var result = StructCopy(arguments.param_criteriaStructure)>
		<cfset var secondaryStructure = StructCopy(arguments.param_secondaryStructure)>

		<!--- secondary structure population --->
		<cfparam name='secondaryStructure.submitSearch' default='true'>
		<cfparam name='secondaryStructure.displayMode' default='NORMAL'>
		<cfparam name='secondaryStructure.queryMode' default='NORMAL'>
		<cfparam name='secondaryStructure.SortKey' default=''>
		<cfparam name='secondaryStructure.criteria_ID_eq' default=''>
		<cfparam name='secondaryStructure.criteria_ID_neq' default=''>
		<cfparam name='secondaryStructure.criteria_ID_gt' default=''>
		<cfparam name='secondaryStructure.criteria_ID_lt' default=''>
		<cfparam name='secondaryStructure.criteria_OWNER_ID_eq' default=''>
		<cfparam name='secondaryStructure.criteria_OWNER_ID_neq' default=''>
		<cfparam name='secondaryStructure.criteria_OWNER_ID_gt' default=''>
		<cfparam name='secondaryStructure.criteria_OWNER_ID_lt' default=''>
		<cfparam name='secondaryStructure.criteria_ACTUAL_SUBMITTER_ID_eq' default=''>
		<cfparam name='secondaryStructure.criteria_ACTUAL_SUBMITTER_ID_neq' default=''>
		<cfparam name='secondaryStructure.criteria_ACTUAL_SUBMITTER_ID_gt' default=''>
		<cfparam name='secondaryStructure.criteria_ACTUAL_SUBMITTER_ID_lt' default=''>
		<cfparam name='secondaryStructure.criteria_TITLE_eq' default=''>
		<cfparam name='secondaryStructure.criteria_TITLE_neq' default=''>
		<cfparam name='secondaryStructure.criteria_TITLE_like' default=''>
		<cfparam name='secondaryStructure.criteria_TITLE_notLike' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_BEGIN_eq' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_BEGIN_lt' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_BEGIN_gt' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_END_eq' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_END_lt' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_END_gt' default=''>
		<cfparam name='secondaryStructure.criteria_COUNTY_ID_eq' default=''>
		<cfparam name='secondaryStructure.criteria_COUNTY_ID_neq' default=''>
		<cfparam name='secondaryStructure.criteria_COUNTY_ID_gt' default=''>
		<cfparam name='secondaryStructure.criteria_COUNTY_ID_lt' default=''>
		<cfparam name='secondaryStructure.criteria_SCOPE_ID_eq' default=''>
		<cfparam name='secondaryStructure.criteria_SCOPE_ID_neq' default=''>
		<cfparam name='secondaryStructure.criteria_SCOPE_ID_gt' default=''>
		<cfparam name='secondaryStructure.criteria_SCOPE_ID_lt' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_eq' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_neq' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_gt' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_lt' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_eq' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_neq' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_like' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_notLike' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_CREATED_eq' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_CREATED_lt' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_CREATED_gt' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_LAST_UPDATED_eq' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_LAST_UPDATED_lt' default=''>
		<cfparam name='secondaryStructure.criteria_DATE_LAST_UPDATED_gt' default=''>
		<!--- custom fields --->
		<cfparam name="secondaryStructure.AUDIENCE_VALUE_CONTACT_TYPE_ID_List" default="">
		<cfparam name="secondaryStructure.AUDIENCE_VALUE_TARGET_AUDIENCE_TYPE_ID_List" default="">
		<cfparam name="secondaryStructure.AUDIENCE_VALUE_RESIDENCE_TYPE_ID_List" default="">
		<cfparam name="secondaryStructure.AUDIENCE_VALUE_GENDER_ID_List" default="">
		<cfparam name="secondaryStructure.AUDIENCE_VALUE_RACE_ID_List" default="">
		<cfparam name="secondaryStructure.AUDIENCE_VALUE_ETHNICITY_ID_List" default="">
		<cfparam name="secondaryStructure.REPORT_FIELD_Query" default="">
		<cfparam name="secondaryStructure.criteria_OwnerNameContains" default="">
		<cfparam name="secondaryStructure.criteria_OwnerFirstNameContains" default="">
		<cfparam name="secondaryStructure.criteria_OwnerLastNameContains" default="">
		<cfparam name="secondaryStructure.criteria_HasStatePlanOfWorkAny" default="">
		<cfparam name="secondaryStructure.criteria_HasStatePlanOfWorkAll" default="">
		<cfparam name="secondaryStructure.criteria_DoesNotHaveStatePlanOfWork" default="">
		<cfparam name="secondaryStructure.criteria_LocalIssue_eq" default=""><!--- local issues --->
		<cfparam name="secondaryStructure.criteria_HasProgramAreaAny" default="">
		<cfparam name="secondaryStructure.criteria_HasProgramAreaAll" default="">
		<cfparam name="secondaryStructure.criteria_HasProgramAreaCount" default="">
		<cfparam name="secondaryStructure.criteria_DoesNotHaveProgramArea" default="">
		<cfparam name="secondaryStructure.criteria_HasTopicAny" default="">
		<cfparam name="secondaryStructure.criteria_DoesNotHaveTopic" default="">
		<cfparam name="secondaryStructure.criteria_HasTopicAll" default="">
		<cfparam name="secondaryStructure.criteria_HasTopicCount" default="">
		<cfparam name="secondaryStructure.criteria_HasKeywordAny" default="">
		<cfparam name="secondaryStructure.criteria_HasKeywordAll" default="">
		<cfparam name="secondaryStructure.criteria_DoesNotHaveKeyword" default="">
		<cfparam name="secondaryStructure.criteria_HasKeywordCount" default="">
		<cfparam name="secondaryStructure.criteria_HasReportTypeAny" default="">
		<cfparam name="secondaryStructure.criteria_HasReportTypeAll" default="">
		<cfparam name="secondaryStructure.criteria_HasReportTypeCount" default="">
		<cfparam name="secondaryStructure.criteria_HasFieldOptionAnyEither" default="">
		<cfparam name="secondaryStructure.criteria_HasFieldOptionAllEither" default="">
		<cfparam name="secondaryStructure.criteria_EthnicDemographic_gt" default="">
		<cfparam name="secondaryStructure.criteria_EthnicDemographic_lt" default="">
		<cfparam name="secondaryStructure.criteria_RacialDemographic_gt" default="">
		<cfparam name="secondaryStructure.criteria_RacialDemographic_lt" default="">
		<cfparam name="secondaryStructure.criteria_ResidenceDemographic_gt" default="">
		<cfparam name="secondaryStructure.criteria_ResidenceDemographic_lt" default="">
		<cfparam name="secondaryStructure.criteria_Contact_gt" default="">
		<cfparam name="secondaryStructure.criteria_Contact_lt" default="">
		<cfparam name="secondaryStructure.criteria_TargetAudience_gt" default="">
		<cfparam name="secondaryStructure.criteria_TargetAudience_lt" default="">
		<cfparam name="secondaryStructure.criteria_ReportField_gt" default="">
		<cfparam name="secondaryStructure.criteria_OneOfReportFields_gt" default="">
		<cfparam name="secondaryStructure.criteria_ReportField_lt" default="">
		<cfparam name="secondaryStructure.criteria_SubReportField_gt" default="">
		<cfparam name="secondaryStructure.criteria_SubReportField_lt" default="">
		<cfparam name="secondaryStructure.criteria_EitherReportField_gt" default="">
		<cfparam name="secondaryStructure.criteria_EitherReportField_lt" default="">
		<cfparam name="secondaryStructure.param_ComparatorsUsePercentage" default="false">
		<cfparam name='secondaryStructure.criteria_PersonnelInvolved' default=''>
		<cfparam name='secondaryStructure.criteria_PERSONNEL_COUNTY_eq' default=''>
		<cfparam name='secondaryStructure.criteria_PERSONNEL_DEPARTMENT_eq' default=''>
		<cfparam name='secondaryStructure.criteria_PERSONNEL_DEPARTMENT_neq' default=''>
		<cfparam name='secondaryStructure.param_GroupSummaryReportBy' default=''>
		<cfparam name='secondaryStructure.param_OmitCubeInGrouping' default=''>
		<cfparam name='secondaryStructure.param_SummaryDataSections' default=''>
		<cfparam name='secondaryStructure.criteria_EditorInCountyOffice' default=''>
		<cfparam name='secondaryStructure.criteria_ACTIVITY_DISTRICT_eq' default=''>
		<cfparam name='secondaryStructure.criteria_DoesNotHaveProgramAreaAndPublicationType' default=''>
		<cfparam name='secondaryStructure.criteria_HasMediaProducedPublicationType' default=''>
		<cfparam name='secondaryStructure.criteria_HasMediaProducedCitation' default=''>
		<cfparam name='secondaryStructure.param_OutputType' default='Normal'>
		<cfparam name='secondaryStructure.criteria_InvolvesDateRange_begin' default=''>
		<cfparam name='secondaryStructure.criteria_InvolvesDateRange_end' default=''>
		<cfparam name='secondaryStructure.criteria_InvolvesMe' default=''>
		<cfparam name='secondaryStructure.criteria_ECH_gt' default=''>
		<cfparam name='secondaryStructure.criteria_CEU_gt' default=''>
		<cfparam name='secondaryStructure.param_DetailSections' default=''>
		<cfparam name='secondaryStructure.param_DepartmentFilterChecksCollaboratorToo' default='false'>
		<cfparam name='secondaryStructure.criteria_SUB_REPORT_ROLE_ID_eq' default=''>
		<cfparam name='secondaryStructure.criteria_ReportsBasedOnLogicModel_eq' default=''>

		<cfloop list="#StructKeyList(secondaryStructure)#" index="thisItem">
			<cfparam name="result.#thisItem#" default="#secondaryStructure[thisItem]#" >
		</cfloop>

		<!--- standard rules --->
		<cfif not result.submitSearch><cfset result.queryMode = 'SCHEMA_ONLY'></cfif>
		<!--- end standard rules --->

		<!--- custom rules --->
		<cfif IsSimpleValue(result.criteria_EthnicDemographic_gt)>
			<cfset result.criteria_EthnicDemographic_gt = EvenLengthListToStruct(result.criteria_EthnicDemographic_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_EthnicDemographic_lt)>
			<cfset result.criteria_EthnicDemographic_lt = EvenLengthListToStruct(result.criteria_EthnicDemographic_lt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_RacialDemographic_gt)>
			<cfset result.criteria_RacialDemographic_gt = EvenLengthListToStruct(result.criteria_RacialDemographic_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_RacialDemographic_lt)>
			<cfset result.criteria_RacialDemographic_lt = EvenLengthListToStruct(result.criteria_RacialDemographic_lt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_ResidenceDemographic_gt)>
			<cfset result.criteria_ResidenceDemographic_gt = EvenLengthListToStruct(result.criteria_ResidenceDemographic_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_ResidenceDemographic_lt)>
			<cfset result.criteria_ResidenceDemographic_lt = EvenLengthListToStruct(result.criteria_ResidenceDemographic_lt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_Contact_gt)>
			<cfset result.criteria_Contact_gt = EvenLengthListToStruct(result.criteria_Contact_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_Contact_lt)>
			<cfset result.criteria_Contact_lt = EvenLengthListToStruct(result.criteria_Contact_lt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_TargetAudience_gt)>
			<cfset result.criteria_TargetAudience_gt = EvenLengthListToStruct(result.criteria_TargetAudience_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_TargetAudience_lt)>
			<cfset result.criteria_TargetAudience_lt = EvenLengthListToStruct(result.criteria_TargetAudience_lt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_ReportField_gt)>
			<cfset result.criteria_ReportField_gt = EvenLengthListToStruct(result.criteria_ReportField_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_OneOfReportFields_gt)>
			<cfset result.criteria_OneOfReportFields_gt = EvenLengthListToStruct(result.criteria_OneOfReportFields_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_ReportField_lt)>
			<cfset result.criteria_ReportField_lt = EvenLengthListToStruct(result.criteria_ReportField_lt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_SubReportField_gt)>
			<cfset result.criteria_SubReportField_gt = EvenLengthListToStruct(result.criteria_SubReportField_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_SubReportField_lt)>
			<cfset result.criteria_SubReportField_lt = EvenLengthListToStruct(result.criteria_SubReportField_lt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_EitherReportField_gt)>
			<cfset result.criteria_EitherReportField_gt = EvenLengthListToStruct(result.criteria_EitherReportField_gt)>
		</cfif>
		<cfif IsSimpleValue(result.criteria_EitherReportField_lt)>
			<cfset result.criteria_EitherReportField_lt = EvenLengthListToStruct(result.criteria_EitherReportField_lt)>
		</cfif>
		<!--- end custom rules --->

		<cfreturn result>
		<!--- end function body --->
	</cffunction>

	<!--- End Structure Population Functions --->

	<!--- Begin Object Structure Validation Function --->
	<cffunction access='public' name='GC3_REPORT_ValidateData' output='false' returntype='any'>
		<cfargument name='param_ObjectStructure' type='struct' required='yes'>
		<cfargument name='param_FieldNames' type='string' required='no' default=''>
		<cfargument name='param_ErrorMessageCollection' type='any' required='no'>
		<cfargument name='param_FieldPrefix' type='string' required='no' default=''>
		<cfargument name='param_GenerateFieldLinks' type='boolean' required='no' default='false'>
		<cfargument name='param_ObjectRequired' type='boolean' required='no' default='true'>
		<!--- begin function body --->
		<cfset var result = true>
		<cfset var addMessages = (IsDefined('param_ErrorMessageCollection'))>
		<cfset var tempMessage = ''>

		<!--- TODO: ensure correct validation and error messages --->

		<cfif (param_FieldNames eq '' or listFindNoCase(param_FieldNames,'OWNER_ID'))
			and (param_ObjectStructure.OWNER_ID eq '' or (not IsNumeric(param_ObjectStructure.OWNER_ID) or param_ObjectStructure.OWNER_ID LTE 0))
		>
			<cfset result = false>
			<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#OWNER_ID">Owner</a>'><cfelse><cfset tempMessage = 'Owner'></cfif>
			<cfset tempMessage = tempMessage & ' is required.'>
			<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
		</cfif>

		<cfif (param_FieldNames eq '' or listFindNoCase(param_FieldNames,'ACTUAL_SUBMITTER_ID'))
			and (param_ObjectStructure.ACTUAL_SUBMITTER_ID eq '' or (not IsNumeric(param_ObjectStructure.ACTUAL_SUBMITTER_ID) or param_ObjectStructure.ACTUAL_SUBMITTER_ID LTE 0))
		>
			<cfset result = false>
			<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#ACTUAL_SUBMITTER_ID">Actual Submitter</a>'><cfelse><cfset tempMessage = 'Actual Submitter'></cfif>
			<cfset tempMessage = tempMessage & ' is required.'>
			<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
		</cfif>

		<cfif (param_FieldNames eq '' or listFindNoCase(param_FieldNames,'TITLE'))
			and (param_ObjectStructure.TITLE eq '' or (not IsValid('STRING',param_ObjectStructure.TITLE)))
		>
			<cfset result = false>
			<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#TITLE">Title</a>'><cfelse><cfset tempMessage = 'Title'></cfif>
			<cfset tempMessage = tempMessage & ' is required.'>
			<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
		</cfif>

		<cfif (param_FieldNames eq '' or listFindNoCase(param_FieldNames,'SCOPE_ID'))
			and (param_ObjectStructure.SCOPE_ID eq '' or (not IsNumeric(param_ObjectStructure.SCOPE_ID) or param_ObjectStructure.SCOPE_ID LTE 0))
		>
			<cfset result = false>
			<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#SCOPE_ID">Scope</a>'><cfelse><cfset tempMessage = 'Geographic Reach'></cfif>
			<cfset tempMessage = tempMessage & ' is required.'>
			<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
		</cfif>

		<!--- location fields --->
		<cfif param_FieldNames eq ''
			or listFindNoCase(param_FieldNames,'ACTIVITY_LOCATION_TYPE_ID')
			or listFindNoCase(param_FieldNames, 'ACTIVITY_LOCATION_ALTERNATE_TEXT')
			or listFindNoCase(param_FieldNames,'COUNTY_ID')
		>
			<!--- must have a location type (eg inside, outside of ga) --->
			<cfif param_ObjectStructure.ACTIVITY_LOCATION_TYPE_ID eq ''
				or not IsNumeric(param_ObjectStructure.ACTIVITY_LOCATION_TYPE_ID)
				or param_ObjectStructure.ACTIVITY_LOCATION_TYPE_ID LTE 0
				or not StructKeyExists(application.cached_struct_GC3_ACTIVITY_LOCATION_TYPE, param_ObjectStructure.ACTIVITY_LOCATION_TYPE_ID)
			>
				<cfset result = false>
				<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#ACTIVITY_LOCATION_TYPE_ID">General location of activity</a>'><cfelse><cfset tempMessage = 'Location of Activity'></cfif>
				<cfset tempMessage = tempMessage & ' is required.'>
				<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
			<!--- has a location type --->
			<cfelse>
				<!--- if has a location type and "outside of ga" or "outside of u.s." selected, make sure user has entered where, exactly --->
				<cfif application.cached_struct_GC3_ACTIVITY_LOCATION_TYPE[param_ObjectStructure.ACTIVITY_LOCATION_TYPE_ID]['USES_ALTERNATE_TEXT'] eq 1
					and param_ObjectStructure.ACTIVITY_LOCATION_ALTERNATE_TEXT eq ''
				>
					<cfset result = false>
					<cfset tempMessage = 'Out-of-State Location is required.'>
					<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
				<!--- make sure user has entered a county or that the default ("Clarke") has been set --->
				<cfelseif (param_ObjectStructure.COUNTY_ID eq '' or (not IsNumeric(param_ObjectStructure.COUNTY_ID) or param_ObjectStructure.COUNTY_ID LTE 0))>
					<cfset result = false>
					<cfset tempMessage = 'County is required.'>
					<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection, tempMessage)></cfif>
				</cfif>
			</cfif>
		</cfif>

		<cfif (param_FieldNames eq '' or listFindNoCase(param_FieldNames,'DATE_BEGIN'))>
			<cfif (param_ObjectStructure.DATE_BEGIN eq '' or (not IsDate(param_ObjectStructure.DATE_BEGIN)))>
				<cfset result = false>
				<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#DATE_BEGIN">Date Begin</a>'><cfelse><cfset tempMessage = 'Date Begin'></cfif>
				<cfset tempMessage = tempMessage & ' must be a valid date and is required.'>
				<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
			<cfelseif DateCompare(param_ObjectStructure.DATE_BEGIN,CreateDate(1900,1,1)) eq -1
					 or DateCompare(param_ObjectStructure.DATE_BEGIN,CreateDate(2100,1,1)) eq 1
			>
				<cfset result = false>
				<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#DATE_BEGIN">Date Begin</a>'><cfelse><cfset tempMessage = 'Date Begin'></cfif>
				<cfset tempMessage = tempMessage & ' must be a valid date after 1/1/1900 and before 1/1/2100.'>
				<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
			</cfif>
		</cfif>

		<cfif (param_FieldNames eq '' or listFindNoCase(param_FieldNames,'DATE_END'))>
			<cfif (param_ObjectStructure.DATE_END eq '' or (not IsDate(param_ObjectStructure.DATE_END)))>
				<cfset result = false>
				<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#DATE_END">Date End</a>'><cfelse><cfset tempMessage = 'Date End'></cfif>
				<cfset tempMessage = tempMessage & ' must be a valid date and is required.'>
				<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
			<cfelseif DateCompare(param_ObjectStructure.DATE_END,CreateDate(1900,1,1)) eq -1
					 or DateCompare(param_ObjectStructure.DATE_END,CreateDate(2100,1,1)) eq 1
			>
				<cfset result = false>
				<cfif param_GenerateFieldLinks><cfset tempMessage = '<a href="###param_FieldPrefix#DATE_END">Date End</a>'><cfelse><cfset tempMessage = 'Date End'></cfif>
				<cfset tempMessage = tempMessage & ' must be a valid date after 1/1/1900 and before 1/1/2100.'>
				<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
			</cfif>
		</cfif>

		<!--- custom validation --->
		<cfif
			(
				param_FieldNames eq ''
			 or
			 (
			 		listFindNoCase(param_FieldNames,'DATE_BEGIN')
			 	and listFindNoCase(param_FieldNames,'DATE_END')
			 )
			)
		  and IsDate(param_ObjectStructure.DATE_BEGIN)
		  and IsDate(param_ObjectStructure.DATE_END)
		  and DateCompare(param_ObjectStructure.DATE_BEGIN,param_ObjectStructure.DATE_END) eq 1
		>
			<cfset result = false>
			<cfset tempMessage = 'Begin Date cannot be after End Date.'>
			<cfif addMessages><cfset AddMessageToMessageCollection(param_ErrorMessageCollection,tempMessage)></cfif>
		</cfif>

		<cfreturn result>
		<!--- end function body --->
	</cffunction>

	<!--- End Object Structure Validation Function --->

	<!--- Begin Query Functions --->

	<cffunction access='public' name='GC3_REPORT_SelectQuery' output='false' returntype='query'>
		<cfargument name='criteriaStructure' required='no' default='#GC3_REPORT_PopulateCriteriaStructure()#' type='struct'>
		<cfargument name='getReportTypeList' required='no' default='false' type='boolean'>
		<!--- begin function body --->
		<cfset var result = ''>
		<cfset var thisItemID = ''>
		<cfset var thisGenderID = ''>
		<cfset var thisRaceID = ''>
		<cfset var thisEthnicityID = ''>
		<cfquery name='result' dataSource='#application.DatabaseDSNs['GACOUNTS3']#'>
			SELECT
				<cfif criteriaStructure.queryMode eq 'SUMMARY_DATA'>
					COUNT (*) AS REPORT_COUNT
				  , COUNT(DISTINCT(OWNER_ID)) AS DISTINCT_OWNER_COUNT
				  , COUNT(DISTINCT(COUNTY_ID)) AS DISTINCT_COUNTY_COUNT
				  , MIN(REPORT.DATE_BEGIN) AS EARLIEST_BEGIN_DATE
				  , MAX(REPORT.DATE_BEGIN) AS LATEST_BEGIN_DATE
				  , OWNER_ID =
				  	CASE
						WHEN COUNT(DISTINCT(OWNER_ID)) <> 1 THEN NULL
						ELSE MAX(OWNER_ID)
					END
				</cfif>
				<cfif criteriaStructure.queryMode eq 'NORMAL'
					or criteriaStructure.queryMode eq 'SCHEMA_ONLY'
					or criteriaStructure.queryMode eq ''
				>
				  	REPORT.ID
				  , REPORT.OWNER_ID
				  , REPORT.ACTUAL_SUBMITTER_ID
				  , REPORT.TITLE
				  , REPORT.DATE_BEGIN
				  , REPORT.DATE_END
				  , REPORT.COUNTY_ID
				  , REPORT.SCOPE_ID
				  , REPORT.ACTIVITY_LOCATION_TYPE_ID
				  , REPORT.ACTIVITY_LOCATION_ALTERNATE_TEXT
				  , REPORT.DATE_CREATED
				  , REPORT.DATE_LAST_UPDATED
				  , ACTIVITY_LOCATION_TYPE.LABEL AS ACTIVITY_LOCATION_TYPE_LABEL
				  , PROGRAM_SCOPE.LABEL AS PROGRAM_SCOPE_LABEL
				  , PERSONNEL.ID AS PERSONNEL_ID
				  , CountyList.CountyListID AS CountyList_CountyListID
				  <!--- Custom Fields --->
				  , ACTIVITY_LOCATION_TYPE.USES_ALTERNATE_TEXT AS ACTIVITY_LOCATION_TYPE_USES_ALTERNATE_TEXT
				  , CountyList.CountyName AS COUNTY_NAME
				  , ContactInfo.fname AS OWNER_FIRST_NAME
				  , ContactInfo.mname AS OWNER_MIDDLE_NAME
				  , ContactInfo.lname AS OWNER_LAST_NAME
				  , USES_RESIDENCE =
				  	CASE
						WHEN REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_TYPE
							WHERE TYPE_ID IN
							(
								SELECT ID
								FROM REPORT_TYPE
								WHERE USES_RESIDENCE = 1
							)
						)
						THEN 1
						ELSE 0
					END
				  , USES_MEDIA_PRODUCTION =
				  	CASE
						WHEN REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_TYPE
							WHERE TYPE_ID IN
							(
								SELECT ID
								FROM REPORT_TYPE
								WHERE USES_MEDIA_PRODUCTION = 1
							)
						)
						THEN 1
						ELSE 0
					END
				  , USES_MEDIA_DISTRIBUTION =
				  	CASE
						WHEN REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_TYPE
							WHERE TYPE_ID IN
							(
								SELECT ID
								FROM REPORT_TYPE
								WHERE USES_MEDIA_DISTRIBUTION = 1
							)
						)
						THEN 1
						ELSE 0
					END
				  , USES_MEDIA_REVIEW =
				  	CASE
						WHEN REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_TYPE
							WHERE TYPE_ID IN
							(
								SELECT ID
								FROM REPORT_TYPE
								WHERE USES_MEDIA_REVIEW = 1
							)
						)
						THEN 1
						ELSE 0
					END
				  , USES_DEMOGRAPHICS =
				  	CASE
						WHEN REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_TYPE
							WHERE TYPE_ID IN
							(
								SELECT REPORT_TYPE_ID
								FROM ASSOCIATION_REPORT_TYPE_CONTACT_TYPE
								WHERE CONTACT_TYPE_ID IN
								(
									SELECT ID
									FROM CONTACT_TYPE
									WHERE USES_DEMOGRAPHICS = 1
								)
							)
						)
						THEN 1
						ELSE 0
					END
				  <!--- bjw 3/18/16 ---->
				  <cfif arguments.getReportTypeList>
				  	,REPORT_TYPE_LIST = (dbo.fnMakeReportTypeList(REPORT.ID))
				  </cfif>

				  <!--- bjw 3/6/15 --->
				  <cfif listFindNoCase(criteriaStructure.param_DetailSections,"CEU") neq 0
				  	 or criteriaStructure.SortKey eq "TOTAL_CEU desc"
				  >
				  	<!--- TODO: find more reasonable reference than label for teaching hours ID--->
				  	, TOTAL_CEU =
					(
						SELECT SUM(CONTACTS.QUANTITY*CONTINUING_EDUCATION_UNIT.FIELD_VALUE)
						FROM SUB_REPORT
						INNER JOIN SUB_REPORT_CONTACT AS CONTACTS ON SUB_REPORT.ID = CONTACTS.SUB_REPORT_ID
							AND CONTACTS.TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
						INNER JOIN ASSOCIATION_SUB_REPORT_FIELD AS CONTINUING_EDUCATION_UNIT ON SUB_REPORT.ID = CONTINUING_EDUCATION_UNIT.SUB_REPORT_ID
							AND CONTINUING_EDUCATION_UNIT.FIELD_ID = #application.cached_struct_GC3_REPORT_FIELD_INDEXED_BY_LABEL["How Many Continuing Education Units (CEUs) Each Participant Received From You"].ID#
						WHERE SUB_REPORT.REPORT_ID = REPORT.ID
					)
				  </cfif>
				  <cfif listFindNoCase(criteriaStructure.param_DetailSections,"ECH") neq 0
				  	 or criteriaStructure.SortKey eq "TOTAL_ECH desc"
				  >
				  	<!--- TODO: find more reasonable reference than label for teaching hours ID--->
				  	, TOTAL_ECH =
					(
						SELECT SUM(CONTACTS.QUANTITY*TEACHING_HOURS.FIELD_VALUE)
						FROM SUB_REPORT
						INNER JOIN SUB_REPORT_CONTACT AS CONTACTS ON SUB_REPORT.ID = CONTACTS.SUB_REPORT_ID
							AND CONTACTS.TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
						INNER JOIN ASSOCIATION_SUB_REPORT_FIELD AS TEACHING_HOURS ON SUB_REPORT.ID = TEACHING_HOURS.SUB_REPORT_ID
							AND TEACHING_HOURS.FIELD_ID = #application.cached_struct_GC3_REPORT_FIELD_INDEXED_BY_LABEL["How Many Hours of Formal Instruction Each Participant Received From You"].ID#
						WHERE SUB_REPORT.REPORT_ID = REPORT.ID
					)
				  </cfif>
				  <cfif listFindNoCase(criteriaStructure.param_DetailSections,"NonExECH") neq 0>
				  	<!--- TODO: find more reasonable reference than label for non-extension teaching hours ID--->
				  	, NON_EXTENSION_ECH =
					(
						SELECT SUM(CONTACTS.QUANTITY*NON_EXTENSION_TEACHING_HOURS.FIELD_VALUE)
						FROM REPORT_CONTACT AS CONTACTS
						INNER JOIN ASSOCIATION_REPORT_FIELD AS NON_EXTENSION_TEACHING_HOURS ON REPORT.ID = NON_EXTENSION_TEACHING_HOURS.REPORT_ID
							AND NON_EXTENSION_TEACHING_HOURS.FIELD_ID = #application.cached_struct_GC3_REPORT_FIELD_INDEXED_BY_LABEL["Hours of Instruction per Participant by Non-UGA Personnel"].ID#
						WHERE REPORT.ID = CONTACTS.REPORT_ID
						  AND CONTACTS.TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
					)
				  </cfif>
				  <cfif listFindNoCase(criteriaStructure.param_DetailSections,"StateFacultyECH") neq 0>
				  	<!--- TODO: find more reasonable reference than label for non-extension teaching hours ID--->
				  	, STATE_FACULTY_ECH =
					(
						SELECT SUM(CONTACTS.QUANTITY*STATE_FACULTY_TEACHING_HOURS.FIELD_VALUE)
						FROM REPORT_CONTACT AS CONTACTS
						INNER JOIN ASSOCIATION_REPORT_FIELD AS STATE_FACULTY_TEACHING_HOURS ON REPORT.ID = STATE_FACULTY_TEACHING_HOURS.REPORT_ID
							AND STATE_FACULTY_TEACHING_HOURS.FIELD_ID = #application.cached_struct_GC3_REPORT_FIELD_INDEXED_BY_LABEL["Hours of Instruction per participant by State Specialists/Program Assistants"].ID#
						WHERE REPORT.ID = CONTACTS.REPORT_ID
						  AND CONTACTS.TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
					)
				  </cfif>

				  <cfif listFindNoCase(criteriaStructure.param_DetailSections,"FaceToFace") neq 0
				  	 or criteriaStructure.SortKey eq "REPORT_FACE_TO_FACE desc"
				  >
				  	<!--- TODO: find more reasonable reference than label for Face To Face--->
				  	, REPORT_FACE_TO_FACE =
					(
						SELECT REPORT_CONTACT.QUANTITY
						FROM REPORT_CONTACT
						WHERE REPORT_ID = REPORT.ID
						  AND TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
					)
				  </cfif>
				  <cfif listFindNoCase(criteriaStructure.param_DetailSections,"SumSubReportFaceToFace") neq 0
				  	 or criteriaStructure.SortKey eq "SUM_SUB_REPORT_FACE_TO_FACE desc"
				  >
				  	<!--- TODO: find more reasonable reference than label for Face To Face--->
				  	, SUM_SUB_REPORT_FACE_TO_FACE =
					CASE
						WHEN
						(
							SELECT REPORT_CONTACT.QUANTITY
							FROM REPORT_CONTACT
							WHERE REPORT_ID = REPORT.ID
							  AND TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
						)
						<=
						SUM_SUB_REPORT_FACE_TO_FACE_CONTACTS_BY_REPORT.SUM_FACE_TO_FACE
					  THEN
					  (
						SELECT REPORT_CONTACT.QUANTITY
						FROM REPORT_CONTACT
						WHERE REPORT_ID = REPORT.ID
						  AND TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
					 )
					 ELSE SUM_SUB_REPORT_FACE_TO_FACE_CONTACTS_BY_REPORT.SUM_FACE_TO_FACE
				  END
				  </cfif>
				  <!--- End Custom Fields --->
				</cfif>
				<!--- Custom Query Modes --->
				<cfif criteriaStructure.queryMode eq 'AUDIENCE_VALUES'
				   or criteriaStructure.queryMode eq 'VALIDATION'
				>
					'1' AS DUMMY
					<cfif criteriaStructure.queryMode eq 'VALIDATION'>
						, REPORT.ID
						, BALANCES_TO_CONTACT_TYPE =
						CASE
							WHEN REPORT.ID IN
							(
								SELECT REPORT_ID
								FROM ASSOCIATION_REPORT_TYPE
								WHERE TYPE_ID IN
								(
									SELECT REPORT_TYPE_ID
									FROM ASSOCIATION_REPORT_TYPE_CONTACT_TYPE
									WHERE CONTACT_TYPE_ID IN
									(
										SELECT ID
										FROM CONTACT_TYPE
										WHERE LABEL = 'Face To Face'
									)
								)
							)
							THEN
							(
								SELECT ID
								FROM CONTACT_TYPE
								WHERE LABEL = 'Face To Face'
							)
							ELSE 0
						END
					  , USES_RESIDENCE =
						CASE
							WHEN REPORT.ID IN
							(
								SELECT REPORT_ID
								FROM ASSOCIATION_REPORT_TYPE
								WHERE TYPE_ID IN
								(
									SELECT ID
									FROM REPORT_TYPE
									WHERE USES_RESIDENCE = 1
								)
							)
							THEN 1
							ELSE 0
						END
					</cfif>
					<cfloop list="#criteriaStructure.AUDIENCE_VALUE_CONTACT_TYPE_ID_List#" index="thisItemID">
						, CONTACT_TYPE_#thisItemID#_QUANTITY =
							(SELECT QUANTITY FROM REPORT_CONTACT WHERE REPORT_ID = REPORT.ID AND TYPE_ID = '#thisItemID#')
					</cfloop>
					<cfloop list="#criteriaStructure.AUDIENCE_VALUE_TARGET_AUDIENCE_TYPE_ID_List#" index="thisItemID">
						, TARGET_AUDIENCE_TYPE_#thisItemID#_QUANTITY =
							(SELECT QUANTITY FROM TARGET_AUDIENCE WHERE REPORT_ID = REPORT.ID AND TYPE_ID = '#thisItemID#')
					</cfloop>
					, TARGET_AUDIENCE_TOTAL_QUANTITY = (SELECT SUM(QUANTITY) FROM TARGET_AUDIENCE WHERE REPORT_ID = REPORT.ID)
					<cfloop list="#criteriaStructure.AUDIENCE_VALUE_RESIDENCE_TYPE_ID_List#" index="thisItemID">
						, RESIDENCE_TYPE_#thisItemID#_QUANTITY =
							(SELECT QUANTITY FROM RESIDENCE_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID AND TYPE_ID = '#thisItemID#')
					</cfloop>
					, RESIDENCE_TOTAL_QUANTITY = (SELECT SUM(QUANTITY) FROM RESIDENCE_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID)
					<cfloop list="#criteriaStructure.AUDIENCE_VALUE_GENDER_ID_List#" index="thisGenderID">
						<cfloop list="#criteriaStructure.AUDIENCE_VALUE_RACE_ID_List#" index="thisRaceID">
							, RACE_#thisRaceID#_GENDER_#thisGenderID#_QUANTITY =
								(SELECT QUANTITY FROM RACIAL_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID AND RACE_ID = '#thisRaceID#' AND GENDER_ID = '#thisGenderID#')
						</cfloop>
						<cfloop list="#criteriaStructure.AUDIENCE_VALUE_ETHNICITY_ID_List#" index="thisEthnicityID">
							, ETHNICITY_#thisEthnicityID#_GENDER_#thisGenderID#_QUANTITY =
								(SELECT QUANTITY FROM ETHNIC_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID AND ETHNICITY_ID = '#thisEthnicityID#' AND GENDER_ID = '#thisGenderID#')
						</cfloop>
						, GENDER_#thisGenderID#_RACIAL_TOTAL_QUANTITY =
							(SELECT SUM(QUANTITY) FROM RACIAL_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID AND GENDER_ID = '#thisGenderID#')
						, GENDER_#thisGenderID#_ETHNIC_TOTAL_QUANTITY =
							(SELECT SUM(QUANTITY) FROM ETHNIC_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID AND GENDER_ID = '#thisGenderID#')
					</cfloop>
					<cfloop list="#criteriaStructure.AUDIENCE_VALUE_RACE_ID_List#" index="thisRaceID">
						, RACE_#thisRaceID#_TOTAL_QUANTITY =
							(SELECT SUM(QUANTITY) FROM RACIAL_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID AND RACE_ID = '#thisRaceID#')
					</cfloop>
					<cfloop list="#criteriaStructure.AUDIENCE_VALUE_ETHNICITY_ID_List#" index="thisEthnicityID">
						, ETHNIC_#thisEthnicityID#_TOTAL_QUANTITY =
							(SELECT SUM(QUANTITY) FROM ETHNIC_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID AND ETHNICITY_ID = '#thisEthnicityID#')
					</cfloop>
					, RACIAL_TOTAL_QUANTITY = (SELECT SUM(QUANTITY) FROM RACIAL_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID)
					, ETHNIC_TOTAL_QUANTITY = (SELECT SUM(QUANTITY) FROM ETHNIC_DEMOGRAPHIC WHERE REPORT_ID = REPORT.ID)
				</cfif>
				<cfif criteriaStructure.queryMode eq 'SUPPLEMENTAL_DATA'>
					  '1' AS DUMMY
					, REPORT.ID AS ID
					, REPORT.ID AS REPORT_ID
					, REPORT.TITLE as REPORT_TITLE
					, REPORT.DATE_BEGIN as REPORT_DATE_BEGIN
					, REPORT.DATE_END as REPORT_DATE_END
					<cfloop query="criteriaStructure.REPORT_FIELD_Query">
						, SUPPLEMENTAL_DATA_#criteriaStructure.REPORT_FIELD_Query.ID#_FIELD_LABEL = '#criteriaStructure.REPORT_FIELD_Query.LABEL#' <!--- (SELECT LABEL FROM REPORT_FIELD WHERE ID = '#thisItemID#') --->
						, SUPPLEMENTAL_DATA_#criteriaStructure.REPORT_FIELD_Query.ID#_VALUE = (
							SELECT FIELD_VALUE
							FROM ASSOCIATION_REPORT_FIELD
							WHERE REPORT_ID = REPORT.ID
							AND FIELD_ID = '#criteriaStructure.REPORT_FIELD_Query.ID#'
						)
						<cfif criteriaStructure.REPORT_FIELD_Query.FIELD_TYPE_LABEL eq "String Data">
							, SUPPLEMENTAL_DATA_#criteriaStructure.REPORT_FIELD_Query.ID#_OPTION_LABEL =
								(
									SELECT LABEL
									FROM FIELD_OPTION
									WHERE FIELD_ID = '#criteriaStructure.REPORT_FIELD_Query.ID#'
									  AND ID = (SELECT FIELD_VALUE FROM ASSOCIATION_REPORT_FIELD WHERE REPORT_ID = REPORT.ID AND FIELD_ID = '#criteriaStructure.REPORT_FIELD_Query.ID#')
								 )
						<cfelseif criteriaStructure.REPORT_FIELD_Query.FIELD_TYPE_LABEL eq "Option Data">
							, SUPPLEMENTAL_DATA_#criteriaStructure.REPORT_FIELD_Query.ID#_OPTION_LABEL =
								(
									SELECT LABEL
									FROM FIELD_OPTION
									WHERE FIELD_ID = '#criteriaStructure.REPORT_FIELD_Query.ID#'
									  AND ID = (SELECT FIELD_VALUE FROM ASSOCIATION_REPORT_FIELD WHERE REPORT_ID = REPORT.ID AND FIELD_ID = '#criteriaStructure.REPORT_FIELD_Query.ID#')
								 )
						<cfelseif criteriaStructure.REPORT_FIELD_Query.FIELD_TYPE_LABEL eq "Boolean Data">
							, SUPPLEMENTAL_DATA_#criteriaStructure.REPORT_FIELD_Query.ID#_OPTION_LABEL =
								CASE
									WHEN (SELECT FIELD_VALUE FROM ASSOCIATION_REPORT_FIELD WHERE REPORT_ID = REPORT.ID AND FIELD_ID = '#criteriaStructure.REPORT_FIELD_Query.ID#') = 1
									THEN 'Yes'
									WHEN (SELECT FIELD_VALUE FROM ASSOCIATION_REPORT_FIELD WHERE REPORT_ID = REPORT.ID AND FIELD_ID = '#criteriaStructure.REPORT_FIELD_Query.ID#') = 0
									THEN 'No'
									ELSE 'Not Set'
								END
						</cfif>
					</cfloop>
				</cfif>
				<!--- End Custom Query Modes --->
			FROM
				  REPORT
			LEFT OUTER JOIN #application.DatabaseDSNs['GACOUNTS3']#..ACTIVITY_LOCATION_TYPE AS ACTIVITY_LOCATION_TYPE ON REPORT.ACTIVITY_LOCATION_TYPE_ID = ACTIVITY_LOCATION_TYPE.ID
			LEFT OUTER JOIN #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PROGRAM_SCOPE AS PROGRAM_SCOPE ON REPORT.SCOPE_ID = PROGRAM_SCOPE.ID
			LEFT OUTER JOIN #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL ON REPORT.OWNER_ID = PERSONNEL.ID
			LEFT OUTER JOIN #application.DatabaseDSNs['portal']#..CountyList AS CountyList ON REPORT.COUNTY_ID = CountyList.CountyListID
			<!--- Custom Joins --->
			LEFT OUTER JOIN #application.DatabaseDSNs['portal']#..ContactInfo AS ContactInfo ON PERSONNEL.COLLEGE_ID = ContactInfo.CollegeID
			<cfif listFindNoCase(criteriaStructure.param_DetailSections,"SumSubReportFaceToFace") neq 0
			   or criteriaStructure.SortKey eq "SUM_SUB_REPORT_FACE_TO_FACE desc"
			>
				LEFT OUTER JOIN
				(
						SELECT SUM(SUB_REPORT_CONTACT.QUANTITY) AS SUM_FACE_TO_FACE
							 , SUB_REPORT.REPORT_ID
						FROM SUB_REPORT_CONTACT
						INNER JOIN SUB_REPORT ON SUB_REPORT_CONTACT.SUB_REPORT_ID = SUB_REPORT.ID
						AND SUB_REPORT_CONTACT.TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
						GROUP BY SUB_REPORT.REPORT_ID
			   )
			  AS SUM_SUB_REPORT_FACE_TO_FACE_CONTACTS_BY_REPORT
			  ON REPORT.ID = SUM_SUB_REPORT_FACE_TO_FACE_CONTACTS_BY_REPORT.REPORT_ID

			</cfif>
			<!--- End Custom Joins --->

			WHERE 1 = 1 <!--- dummy condition to avoid WHERE/AND logic for following code --->
			#GC3_REPORT_GenerateCriteriaSQL(criteriaStructure)#
			<cfif criteriaStructure.queryMode eq 'NORMAL'
			   or criteriaStructure.queryMode eq ''
			   or criteriaStructure.queryMode eq 'VALIDATION'
			>
				<cfif IsValid('variableName',criteriaStructure.SortKey)
				   or criteriaStructure.SortKey eq "REPORT.DATE_CREATED desc"
				   or criteriaStructure.SortKey eq "REPORT.DATE_BEGIN desc"
				   or criteriaStructure.SortKey eq "TOTAL_ECH desc"
				   or criteriaStructure.SortKey eq "TOTAL_CEU desc"
				   or criteriaStructure.SortKey eq "REPORT_FACE_TO_FACE desc"
				>
					ORDER BY #criteriaStructure.SortKey#
				</cfif>
			</cfif>
		</cfquery>
		<cfreturn result>
		<!--- end function body --->
	</cffunction>

	<cffunction access='public' name='GC3_REPORT_WriteQuery' output='false' returntype='void'>
		<cfargument name='objectStructure' type='struct' required='yes'>
		<cfargument name='criteriaStructure' type='struct' required='no'>
		<cfargument name='modifyMultiple' type='boolean' required='no' default='false'>
		<cfargument name='insertIfDoesNotExist' type='boolean' required='no' default='false'>
		<!--- begin function body --->
		<cfset var getData = ''>
		<cfset var insertRequired = false>
		<cfset var InsertData = ''>
		<cfset var UpdateData = ''>

		<cfif IsDefined('arguments.criteriaStructure')>
			<cfset criteriaStructure = GC3_REPORT_PopulateCriteriaStructure(criteriaStructure)>
		<cfelse>
			<cfset criteriaStructure = GC3_REPORT_PopulateCriteriaStructure()>
		</cfif>

		<cfif not modifyMultiple>
			<!--- check for primary key in criteria structure --->
			<cfif listLen(criteriaStructure.criteria_ID_eq) neq 1>
				<!--- if no criteria PK, check in object structure --->
				<cfif listLen(objectStructure.ID) neq 1>
					<!--- if no PK in either, and modifyMultiple not on, attempt insert, but do no updating --->
					<cfset insertRequired = true>
				<cfelse>
					<!--- if objectStructure has PK, set criteria PK by objectStructure PK --->
					<cfset criteriaStructure.criteria_ID_eq = objectStructure.ID>
				</cfif>
			</cfif>
		</cfif>

		<cfquery name='InsertData' datasource='#application.DatabaseDSNs['GACOUNTS3']#'>
			<cfif not insertRequired>
				IF EXISTS
				(
					SELECT 1
					FROM REPORT
					WHERE 1 = 1 <!--- dummy condition to avoid WHERE/AND logic for following code --->
					#GC3_REPORT_GenerateCriteriaSQL(criteriaStructure)#
				)
				BEGIN
				UPDATE REPORT
				SET
					OWNER_ID = <cfif IsNumeric(objectStructure.OWNER_ID)><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.OWNER_ID#" /><cfelse>NULL</cfif>
				  , ACTUAL_SUBMITTER_ID = <cfif IsNumeric(objectStructure.ACTUAL_SUBMITTER_ID)><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.ACTUAL_SUBMITTER_ID#" /><cfelse>NULL</cfif>
				  , TITLE = <cfif objectStructure.TITLE neq ''><cfqueryparam cfsqltype="cf_sql_varchar" value="#objectStructure.TITLE#" /><cfelse>NULL</cfif>
				  , DATE_BEGIN = <cfif IsDate(objectStructure.DATE_BEGIN)><cfqueryparam cfsqltype="cf_sql_timestamp" value="#CreateODBCDateTime(objectStructure.DATE_BEGIN)#" /><cfelse>NULL</cfif>
				  , DATE_END = <cfif IsDate(objectStructure.DATE_END)><cfqueryparam cfsqltype="cf_sql_timestamp" value="#CreateODBCDateTime(objectStructure.DATE_END)#" /><cfelse>NULL</cfif>
				  , COUNTY_ID = <cfif IsNumeric(objectStructure.COUNTY_ID)><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.COUNTY_ID#" /><cfelse>NULL</cfif>
				  , SCOPE_ID = <cfif IsNumeric(objectStructure.SCOPE_ID)><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.SCOPE_ID#" /><cfelse>NULL</cfif>
				  , ACTIVITY_LOCATION_TYPE_ID = <cfif IsNumeric(objectStructure.ACTIVITY_LOCATION_TYPE_ID)><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.ACTIVITY_LOCATION_TYPE_ID#" /><cfelse>NULL</cfif>
				  , ACTIVITY_LOCATION_ALTERNATE_TEXT = <cfif objectStructure.ACTIVITY_LOCATION_ALTERNATE_TEXT neq ''><cfqueryparam cfsqltype="cf_sql_varchar" value="#objectStructure.ACTIVITY_LOCATION_ALTERNATE_TEXT#" /><cfelse>NULL</cfif>
				  , DATE_LAST_UPDATED = <cfqueryparam cfsqltype="cf_sql_timestamp" value="#CreateODBCDateTime(Now())#" />

				WHERE 1 = 1 <!--- dummy condition to avoid WHERE/AND logic for following code --->
				#GC3_REPORT_GenerateCriteriaSQL(criteriaStructure)#
				END
				ELSE
				BEGIN
			</cfif>
			<cfif insertIfDoesNotExist>
					INSERT
					INTO REPORT
					(
						OWNER_ID
					  , ACTUAL_SUBMITTER_ID
					  , TITLE
					  , DATE_BEGIN
					  , DATE_END
					  , COUNTY_ID
					  , SCOPE_ID
					  , ACTIVITY_LOCATION_TYPE_ID
					  , ACTIVITY_LOCATION_ALTERNATE_TEXT
					  , DATE_CREATED
					  , DATE_LAST_UPDATED
					)
					VALUES
					(
						<cfif not IsNumeric(objectStructure.OWNER_ID)>NULL<cfelse><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.OWNER_ID#" /></cfif>
					  , <cfif not IsNumeric(objectStructure.ACTUAL_SUBMITTER_ID)>NULL<cfelse><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.ACTUAL_SUBMITTER_ID#" /></cfif>
					  , <cfif objectStructure.TITLE neq ''><cfqueryparam cfsqltype="cf_sql_varchar" value="#objectStructure.TITLE#" /><cfelse>NULL</cfif>
					  , <cfif IsDate(objectStructure.DATE_BEGIN)><cfqueryparam cfsqltype="cf_sql_timestamp" value="#CreateODBCDateTime(objectStructure.DATE_BEGIN)#" /><cfelse>NULL</cfif>
					  , <cfif IsDate(objectStructure.DATE_END)><cfqueryparam cfsqltype="cf_sql_timestamp" value="#CreateODBCDateTime(objectStructure.DATE_END)#" /><cfelse>NULL</cfif>
					  , <cfif not IsNumeric(objectStructure.COUNTY_ID)>NULL<cfelse><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.COUNTY_ID#" /></cfif>
					  , <cfif not IsNumeric(objectStructure.SCOPE_ID)>NULL<cfelse><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.SCOPE_ID#" /></cfif>
					  , <cfif not IsNumeric(objectStructure.ACTIVITY_LOCATION_TYPE_ID)>NULL<cfelse><cfqueryparam cfsqltype="cf_sql_integer" value="#objectStructure.ACTIVITY_LOCATION_TYPE_ID#" /></cfif>
					  , <cfif objectStructure.ACTIVITY_LOCATION_ALTERNATE_TEXT neq ''><cfqueryparam cfsqltype="cf_sql_varchar" value="#objectStructure.ACTIVITY_LOCATION_ALTERNATE_TEXT#" /><cfelse>NULL</cfif>
					  , <cfqueryparam cfsqltype="cf_sql_timestamp" value="#CreateODBCDateTime(Now())#" />
					  , <cfqueryparam cfsqltype="cf_sql_timestamp" value="#CreateODBCDateTime(Now())#" />
					)
					SELECT
						IDENT_CURRENT('REPORT') AS 'LastInsertedIdentity'
						, @@ROWCOUNT AS 'RowsAffectedCount'
			<cfelse>
				SELECT 1 <!--- dummy value to prevent empty SQL error --->
			</cfif>
			<cfif not insertRequired>
				END
			</cfif>
		</cfquery>
		<cfif IsDefined('InsertData.RowsAffectedCount') and InsertData.RowsAffectedCount eq 1>
			<cfset objectStructure.ExistsInDB = true>
		</cfif>
		<cfif IsDefined('InsertData.LastInsertedIdentity') and InsertData.LastInsertedIdentity GT 0>
			<cfset objectStructure.ID = InsertData.LastInsertedIdentity>
		</cfif>
		<!--- end function body --->
	</cffunction>

	<cffunction access='public' name='GC3_REPORT_DeleteQuery' output='false' returntype='void'>
		<cfargument name='criteriaStructure' type='struct' required='yes'>
		<cfargument name='deleteMultiple' type='boolean' required='no' default='false'>
		<!--- begin function body --->
		<cfset var DeleteData = ''>
		<cfif not deleteMultiple>
			<cfif
				   listLen(criteriaStructure.criteria_ID_eq) neq 1

			>
				<!--- deleteMultiple is not on, and primary key not specified, so do nothing --->
				<cfreturn />
			</cfif>
		</cfif>

		<cfquery name='DeleteData' datasource='#application.DatabaseDSNs['GACOUNTS3']#'>
			DELETE FROM REPORT
			WHERE 1 = 1 <!--- dummy condition to avoid WHERE/AND logic for following code --->
			#GC3_REPORT_GenerateCriteriaSQL(criteriaStructure)#
		</cfquery>

		<!--- end function body --->
	</cffunction>

	<cffunction access='public' name='GC3_REPORT_GenerateCriteriaSQL' output='false' returntype='string'>
		<cfargument name='criteriaStructure' required='no' default='#GC3_REPORT_PopulateCriteriaStructure()#' type='struct'>
		<!--- begin function body --->
		<cfset var result = ''>
		<cfset var thisItem = ''>
		<cfset var tempTypeID = ''>
		<cfset var tempValue = ''>
		<cfoutput>
			<cfset EscapeSingleQuotesInStruct(criteriaStructure)>
			<cfsavecontent variable='result'>
				<cfif criteriaStructure.queryMode eq 'SCHEMA_ONLY'>AND 1 = 2</cfif>
				<cfif criteriaStructure.criteria_ID_eq neq ''>AND REPORT.ID IN (#ListQualify(criteriaStructure.criteria_ID_eq,"'")#)</cfif>
				<cfif criteriaStructure.criteria_ID_neq neq ''>AND REPORT.ID NOT IN (#ListQualify(criteriaStructure.criteria_ID_neq,"'")#)</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_ID_gt)>AND REPORT.ID > '#criteriaStructure.criteria_ID_gt#'</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_ID_lt)>AND REPORT.ID < '#criteriaStructure.criteria_ID_lt#'</cfif>
				<cfif criteriaStructure.criteria_OWNER_ID_eq neq ''>AND REPORT.OWNER_ID IN (#ListQualify(criteriaStructure.criteria_OWNER_ID_eq,"'")#)</cfif>
				<cfif criteriaStructure.criteria_OWNER_ID_neq neq ''>AND REPORT.OWNER_ID NOT IN (#ListQualify(criteriaStructure.criteria_OWNER_ID_neq,"'")#)</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_OWNER_ID_gt)>AND REPORT.OWNER_ID > '#criteriaStructure.criteria_OWNER_ID_gt#'</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_OWNER_ID_lt)>AND REPORT.OWNER_ID < '#criteriaStructure.criteria_OWNER_ID_lt#'</cfif>
				<cfif criteriaStructure.criteria_ACTUAL_SUBMITTER_ID_eq neq ''>AND REPORT.ACTUAL_SUBMITTER_ID IN (#ListQualify(criteriaStructure.criteria_ACTUAL_SUBMITTER_ID_eq,"'")#)</cfif>
				<cfif criteriaStructure.criteria_ACTUAL_SUBMITTER_ID_neq neq ''>AND REPORT.ACTUAL_SUBMITTER_ID NOT IN (#ListQualify(criteriaStructure.criteria_ACTUAL_SUBMITTER_ID_neq,"'")#)</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_ACTUAL_SUBMITTER_ID_gt)>AND REPORT.ACTUAL_SUBMITTER_ID > '#criteriaStructure.criteria_ACTUAL_SUBMITTER_ID_gt#'</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_ACTUAL_SUBMITTER_ID_lt)>AND REPORT.ACTUAL_SUBMITTER_ID < '#criteriaStructure.criteria_ACTUAL_SUBMITTER_ID_lt#'</cfif>
				<cfif criteriaStructure.criteria_TITLE_eq neq ''>AND REPORT.TITLE IN (#ListQualify(replace(criteriaStructure.criteria_TITLE_eq,"'","''","all"),"'")#)</cfif>
				<cfif criteriaStructure.criteria_TITLE_neq neq ''>AND REPORT.TITLE NOT IN (#ListQualify(replace(criteriaStructure.criteria_TITLE_neq,"'","''","all"),"'")#)</cfif>
				<cfif criteriaStructure.criteria_TITLE_like neq ''>AND REPORT.TITLE LIKE '%#criteriaStructure.criteria_TITLE_like#%'</cfif>
				<cfif criteriaStructure.criteria_TITLE_notLike neq ''>AND NOT REPORT.TITLE LIKE '%#criteriaStructure.criteria_TITLE_notLike#%'</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_BEGIN_eq)>AND REPORT.DATE_BEGIN= #CreateODBCDateTime(criteriaStructure.criteria_DATE_BEGIN_eq)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_BEGIN_gt)>AND REPORT.DATE_BEGIN >= #CreateODBCDateTime(criteriaStructure.criteria_DATE_BEGIN_gt)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_BEGIN_lt)>AND REPORT.DATE_BEGIN <= #CreateODBCDateTime(criteriaStructure.criteria_DATE_BEGIN_lt)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_END_eq)>AND REPORT.DATE_END= #CreateODBCDateTime(criteriaStructure.criteria_DATE_END_eq)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_END_gt)>AND REPORT.DATE_END >= #CreateODBCDateTime(criteriaStructure.criteria_DATE_END_gt)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_END_lt)>AND REPORT.DATE_END <= #CreateODBCDateTime(criteriaStructure.criteria_DATE_END_lt)#</cfif>
				<cfif criteriaStructure.criteria_COUNTY_ID_eq neq ''>AND REPORT.COUNTY_ID IN (#ListQualify(criteriaStructure.criteria_COUNTY_ID_eq,"'")#)</cfif>
				<cfif criteriaStructure.criteria_COUNTY_ID_neq neq ''>AND REPORT.COUNTY_ID NOT IN (#ListQualify(criteriaStructure.criteria_COUNTY_ID_neq,"'")#)</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_COUNTY_ID_gt)>AND REPORT.COUNTY_ID > '#criteriaStructure.criteria_COUNTY_ID_gt#'</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_COUNTY_ID_lt)>AND REPORT.COUNTY_ID < '#criteriaStructure.criteria_COUNTY_ID_lt#'</cfif>
				<cfif criteriaStructure.criteria_SCOPE_ID_eq neq ''>AND REPORT.SCOPE_ID IN (#ListQualify(criteriaStructure.criteria_SCOPE_ID_eq,"'")#)</cfif>
				<cfif criteriaStructure.criteria_SCOPE_ID_neq neq ''>AND REPORT.SCOPE_ID NOT IN (#ListQualify(criteriaStructure.criteria_SCOPE_ID_neq,"'")#)</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_SCOPE_ID_gt)>AND REPORT.SCOPE_ID > '#criteriaStructure.criteria_SCOPE_ID_gt#'</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_SCOPE_ID_lt)>AND REPORT.SCOPE_ID < '#criteriaStructure.criteria_SCOPE_ID_lt#'</cfif>
				<cfif criteriaStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_eq neq ''>AND REPORT.ACTIVITY_LOCATION_TYPE_ID IN (#ListQualify(criteriaStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_eq,"'")#)</cfif>
				<cfif criteriaStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_neq neq ''>AND REPORT.ACTIVITY_LOCATION_TYPE_ID NOT IN (#ListQualify(criteriaStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_neq,"'")#)</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_gt)>AND REPORT.ACTIVITY_LOCATION_TYPE_ID > '#criteriaStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_gt#'</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_lt)>AND REPORT.ACTIVITY_LOCATION_TYPE_ID < '#criteriaStructure.criteria_ACTIVITY_LOCATION_TYPE_ID_lt#'</cfif>
				<cfif criteriaStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_eq neq ''>AND REPORT.ACTIVITY_LOCATION_ALTERNATE_TEXT IN (#ListQualify(replace(criteriaStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_eq,"'","''","all"),"'")#)</cfif>
				<cfif criteriaStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_neq neq ''>AND REPORT.ACTIVITY_LOCATION_ALTERNATE_TEXT NOT IN (#ListQualify(replace(criteriaStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_neq,"'","''","all"),"'")#)</cfif>
				<cfif criteriaStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_like neq ''>AND REPORT.ACTIVITY_LOCATION_ALTERNATE_TEXT LIKE '%#criteriaStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_like#%'</cfif>
				<cfif criteriaStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_notLike neq ''>AND NOT REPORT.ACTIVITY_LOCATION_ALTERNATE_TEXT LIKE '%#criteriaStructure.criteria_ACTIVITY_LOCATION_ALTERNATE_TEXT_notLike#%'</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_CREATED_eq)>AND REPORT.DATE_CREATED= #CreateODBCDateTime(criteriaStructure.criteria_DATE_CREATED_eq)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_CREATED_gt)>AND REPORT.DATE_CREATED >= #CreateODBCDateTime(criteriaStructure.criteria_DATE_CREATED_gt)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_CREATED_lt)>AND REPORT.DATE_CREATED <= #CreateODBCDateTime(criteriaStructure.criteria_DATE_CREATED_lt)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_LAST_UPDATED_eq)>AND REPORT.DATE_LAST_UPDATED= #CreateODBCDateTime(criteriaStructure.criteria_DATE_LAST_UPDATED_eq)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_LAST_UPDATED_gt)>AND REPORT.DATE_LAST_UPDATED >= #CreateODBCDateTime(criteriaStructure.criteria_DATE_LAST_UPDATED_gt)#</cfif>
				<cfif IsValid('DATE',criteriaStructure.criteria_DATE_LAST_UPDATED_lt)>AND REPORT.DATE_LAST_UPDATED <= #CreateODBCDateTime(criteriaStructure.criteria_DATE_LAST_UPDATED_lt)#</cfif>
				<!--- Custom Criteria Implementations --->
				<cfif IsValid('DATE',criteriaStructure.criteria_InvolvesDateRange_begin)
				   or IsValid('DATE',criteriaStructure.criteria_InvolvesDateRange_end)
				>
					<cfif IsValid('DATE',criteriaStructure.criteria_InvolvesDateRange_begin)>
						AND REPORT.DATE_END >= #CreateODBCDateTime(criteriaStructure.criteria_InvolvesDateRange_begin)#
					</cfif>
					<cfif IsValid('DATE',criteriaStructure.criteria_InvolvesDateRange_end)>
						AND REPORT.DATE_BEGIN <= #CreateODBCDateTime(criteriaStructure.criteria_InvolvesDateRange_end)#
					</cfif>
				</cfif>
				<cfif criteriaStructure.criteria_OwnerNameContains neq ''>
					AND REPORT.OWNER_ID IN
					(
						SELECT ID
						FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL
						WHERE PERSONNEL.COLLEGE_ID IN
						  (
							SELECT CollegeID
							FROM #application.DatabaseDSNs['PORTAL']#..ContactInfo
							WHERE fname LIKE '%#criteriaStructure.criteria_OwnerNameContains#%'
							   OR mname LIKE '%#criteriaStructure.criteria_OwnerNameContains#%'
							   OR lname LIKE '%#criteriaStructure.criteria_OwnerNameContains#%'
						  )
					)
				</cfif>
				<cfif criteriaStructure.criteria_OwnerFirstNameContains neq ''>
					AND REPORT.OWNER_ID IN
					(
						SELECT ID
						FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL
						WHERE PERSONNEL.COLLEGE_ID IN
						  (
							SELECT CollegeID
							FROM #application.DatabaseDSNs['PORTAL']#..ContactInfo
							WHERE fname LIKE '%#criteriaStructure.criteria_OwnerFirstNameContains#%'
						  )
					)
				</cfif>
				<cfif criteriaStructure.criteria_OwnerLastNameContains neq ''>
					AND REPORT.OWNER_ID IN
					(
						SELECT ID
						FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL
						WHERE PERSONNEL.COLLEGE_ID IN
						  (
							SELECT CollegeID
							FROM #application.DatabaseDSNs['PORTAL']#..ContactInfo
							WHERE lname LIKE '%#criteriaStructure.criteria_OwnerLastNameContains#%'
						  )
					)
				</cfif>
				<cfif criteriaStructure.criteria_PERSONNEL_COUNTY_eq neq "">
					AND REPORT.OWNER_ID IN
					(
						SELECT ID
						FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL
						WHERE PERSONNEL.COLLEGE_ID IN
						  (
							SELECT CollegeID
							FROM #application.DatabaseDSNs['PORTAL']#..ContactInfo
							WHERE countyOfficeID IN
							(
								SELECT countyOfficeID
								FROM #application.DatabaseDSNs['PORTAL']#..countyOffice
								WHERE CountyListID IN (#listQualify(criteriaStructure.criteria_PERSONNEL_COUNTY_eq,"'")#)
							)
						  )
					)
				</cfif>
				<cfif criteriaStructure.criteria_PERSONNEL_DEPARTMENT_eq neq "">
					AND
					(
						REPORT.OWNER_ID IN
						(
							SELECT ID
							FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL
							WHERE PERSONNEL.COLLEGE_ID IN
							  (
								SELECT CollegeID
								FROM #application.DatabaseDSNs['PORTAL']#..UserDept
								WHERE deptID IN
								(
									SELECT deptID
									FROM #application.DatabaseDSNs['PORTAL']#..GroupList
									WHERE BudgetDept IN (#listQualify(criteriaStructure.criteria_PERSONNEL_DEPARTMENT_eq,"'")#)
								)
							  )
						)
						<cfif IsBoolean(criteriaStructure.param_DepartmentFilterChecksCollaboratorToo)
						  and criteriaStructure.param_DepartmentFilterChecksCollaboratorToo
						>
							OR REPORT.ID IN
							(
								SELECT REPORT_ID
								FROM REPORT_PERSONNEL
								WHERE PERSONNEL_ID IN
								(
									SELECT ID
									FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL
									WHERE PERSONNEL.COLLEGE_ID IN
									  (
										SELECT CollegeID
										FROM #application.DatabaseDSNs['PORTAL']#..UserDept
										WHERE deptID IN
										(
											SELECT deptID
											FROM #application.DatabaseDSNs['PORTAL']#..GroupList
											WHERE BudgetDept IN (#listQualify(criteriaStructure.criteria_PERSONNEL_DEPARTMENT_eq,"'")#)
										)
									  )
								)
							)
						</cfif>
					)
				</cfif>
				<!--- added 11/12/12 bjw --->
				<cfif criteriaStructure.criteria_PERSONNEL_DEPARTMENT_neq neq "">
					AND
					(
						REPORT.OWNER_ID NOT IN
						(
							SELECT ID
							FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL
							WHERE PERSONNEL.COLLEGE_ID IN
							  (
								SELECT CollegeID
								FROM #application.DatabaseDSNs['PORTAL']#..UserDept
								WHERE deptID IN
								(
									SELECT deptID
									FROM #application.DatabaseDSNs['PORTAL']#..GroupList
									WHERE BudgetDept IN (#listQualify(criteriaStructure.criteria_PERSONNEL_DEPARTMENT_neq,"'")#)
								)
							  )
						)
						<cfif IsBoolean(criteriaStructure.param_DepartmentFilterChecksCollaboratorToo)
						  and criteriaStructure.param_DepartmentFilterChecksCollaboratorToo
						>
							OR REPORT.ID NOT IN
							(
								SELECT REPORT_ID
								FROM REPORT_PERSONNEL
								WHERE PERSONNEL_ID IN
								(
									SELECT ID
									FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL AS PERSONNEL
									WHERE PERSONNEL.COLLEGE_ID IN
									  (
										SELECT CollegeID
										FROM #application.DatabaseDSNs['PORTAL']#..UserDept
										WHERE deptID IN
										(
											SELECT deptID
											FROM #application.DatabaseDSNs['PORTAL']#..GroupList
											WHERE BudgetDept IN (#listQualify(criteriaStructure.criteria_PERSONNEL_DEPARTMENT_neq,"'")#)
										)
									  )
								)
							)
						</cfif>
					)
				</cfif>



				<cfif criteriaStructure.criteria_HasStatePlanOfWorkAny neq ''>
					AND REPORT.ID IN
					(
						SELECT SUB_REPORT.REPORT_ID
						FROM SUB_REPORT
						WHERE
						  (
						  	STATE_PLANNED_PROGRAM_ID IN (#ListQualify(criteriaStructure.criteria_HasStatePlanOfWorkAny,"'")#)
							OR PLANNED_PROGRAM_ID IN
							(
								SELECT ID
								FROM #application.DatabaseDSNs['FederalPOWDatasource']#..PLANNED_PROGRAM
								WHERE STATE_PLANNED_PROGRAM_ID IN (#ListQualify(criteriaStructure.criteria_HasStatePlanOfWorkAny,"'")#)
							)
						  )
					)
				</cfif>
				<cfif criteriaStructure.criteria_DoesNotHaveStatePlanOfWork neq ''>
					AND REPORT.ID NOT IN
					(
						SELECT SUB_REPORT.REPORT_ID
						FROM SUB_REPORT
						WHERE
						  (
						  	STATE_PLANNED_PROGRAM_ID IN (#ListQualify(criteriaStructure.criteria_DoesNotHaveStatePlanOfWork,"'")#)
							OR PLANNED_PROGRAM_ID IN
							(
								SELECT ID
								FROM #application.DatabaseDSNs['FederalPOWDatasource']#..PLANNED_PROGRAM
								WHERE STATE_PLANNED_PROGRAM_ID IN (#ListQualify(criteriaStructure.criteria_DoesNotHaveStatePlanOfWork,"'")#)
							)
						  )
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasStatePlanOfWorkAll neq ''>
					<cfloop list="#criteriaStructure.criteria_HasStatePlanOfWorkAll#" index="thisItem">
						AND REPORT.ID IN
						(
							SELECT SUB_REPORT.REPORT_ID
							FROM SUB_REPORT
							WHERE
							  (
								STATE_PLANNED_PROGRAM_ID = '#thisItem#'
								OR PLANNED_PROGRAM_ID IN
								(
									SELECT ID
									FROM #application.DatabaseDSNs['FederalPOWDatasource']#..PLANNED_PROGRAM
									WHERE STATE_PLANNED_PROGRAM_ID = '#thisItem#'
								)
							  )
						)
					</cfloop>
				</cfif>
				<!--- search local issues. added 3/5/15 bjw --->
				<cfif criteriaStructure.criteria_LocalIssue_eq neq ''>
					AND REPORT.ID IN (
						SELECT SUB_REPORT.REPORT_ID
						FROM SUB_REPORT
						WHERE PLANNED_PROGRAM_ID = (#ListQualify(criteriaStructure.criteria_LocalIssue_eq,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasProgramAreaAny neq ''>
					AND REPORT.ID IN
					(
						SELECT REPORT_ID
						FROM ASSOCIATION_REPORT_PROGRAM_AREA
						WHERE AREA_ID IN (#ListQualify(criteriaStructure.criteria_HasProgramAreaAny,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasProgramAreaAll neq ''>
					<cfloop list="#criteriaStructure.criteria_HasProgramAreaAll#" index="thisItem">
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_PROGRAM_AREA
							WHERE AREA_ID = '#thisItem#'
						)
					</cfloop>
				</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_HasProgramAreaCount)>
					AND #criteriaStructure.criteria_HasProgramAreaCount# =
					(
						SELECT COUNT(1)
						FROM ASSOCIATION_REPORT_PROGRAM_AREA
						WHERE ASSOCIATION_REPORT_PROGRAM_AREA.REPORT_ID = REPORT.ID
					)
				</cfif>
				<cfif criteriaStructure.criteria_DoesNotHaveProgramArea neq ''>
					AND REPORT.ID NOT IN
					(
						SELECT REPORT_ID
						FROM ASSOCIATION_REPORT_PROGRAM_AREA
						WHERE AREA_ID IN (#ListQualify(criteriaStructure.criteria_DoesNotHaveProgramArea,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasTopicAny neq ''>
					AND REPORT.ID IN
					(
						SELECT REPORT_ID
						FROM ASSOCIATION_REPORT_TOPIC
						WHERE ASSOCIATION_REPORT_TOPIC.REPORT_ID = REPORT.ID
						  AND TOPIC_ID IN (#ListQualify(criteriaStructure.criteria_HasTopicAny,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_DoesNotHaveTopic neq ''>
					AND REPORT.ID NOT IN
					(
						SELECT REPORT_ID
						FROM ASSOCIATION_REPORT_TOPIC
						WHERE ASSOCIATION_REPORT_TOPIC.REPORT_ID = REPORT.ID
						  AND TOPIC_ID IN (#ListQualify(criteriaStructure.criteria_DoesNotHaveTopic,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasTopicAll neq ''>
					<cfloop list="#criteriaStructure.criteria_HasTopicAll#" index="thisItem">
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_TOPIC
							WHERE TOPIC_ID = '#thisItem#'
						)
					</cfloop>
				</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_HasTopicCount)>
					AND #criteriaStructure.criteria_HasTopicCount# =
					(
						SELECT COUNT(1)
						FROM ASSOCIATION_REPORT_TOPIC
						WHERE ASSOCIATION_REPORT_TOPIC.REPORT_ID = REPORT.ID
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasKeywordAny neq ''>
					AND REPORT.ID IN
					(
						SELECT REPORT_ID
						FROM ASSOCIATION_REPORT_KEYWORD
						WHERE KEYWORD_ID IN (#ListQualify(criteriaStructure.criteria_HasKeywordAny,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_DoesNotHaveKeyword neq ''>
					AND REPORT.ID NOT IN
					(
						SELECT REPORT_ID
						FROM ASSOCIATION_REPORT_KEYWORD
						WHERE KEYWORD_ID IN (#ListQualify(criteriaStructure.criteria_DoesNotHaveKeyword,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasKeywordAll neq ''>
					<cfloop list="#criteriaStructure.criteria_HasKeywordAll#" index="thisItem">
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_KEYWORD
							WHERE KEYWORD_ID = '#thisItem#'
						)
					</cfloop>
				</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_HasKeywordCount)>
					AND #criteriaStructure.criteria_HasKeywordCount# =
					(
						SELECT COUNT(1)
						FROM ASSOCIATION_REPORT_KEYWORD
						WHERE ASSOCIATION_REPORT_KEYWORD.REPORT_ID = REPORT.ID
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasReportTypeAny neq ''>
					AND REPORT.ID IN
					(
						SELECT REPORT_ID
						FROM ASSOCIATION_REPORT_TYPE
						WHERE TYPE_ID IN (#ListQualify(criteriaStructure.criteria_HasReportTypeAny,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasReportTypeAll neq ''>
					<cfloop list="#criteriaStructure.criteria_HasReportTypeAll#" index="thisItem">
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_TYPE
							WHERE TYPE_ID = '#thisItem#'
						)
					</cfloop>
				</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_HasReportTypeCount)>
					AND #criteriaStructure.criteria_HasReportTypeCount# =
					(
						SELECT COUNT(1)
						FROM ASSOCIATION_REPORT_TYPE
						WHERE ASSOCIATION_REPORT_TYPE.REPORT_ID = REPORT.ID
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasFieldOptionAnyEither neq ''>
					AND REPORT.ID IN
					(
						SELECT REPORT_ID
						FROM ASSOCIATION_REPORT_FIELD
						WHERE FIELD_ID =
						  (
							SELECT FIELD_ID
							FROM FIELD_OPTION
							WHERE ID = ASSOCIATION_REPORT_FIELD.FIELD_VALUE
						  )
						  AND FIELD_VALUE IN (#ListQualify(criteriaStructure.criteria_HasFieldOptionAnyEither,"'")#)
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasFieldOptionAllEither neq ''>
					<cfloop list="#criteriaStructure.criteria_HasFieldOptionAllEither#" index="thisItem">
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_FIELD
							WHERE FIELD_ID =
							  (
								SELECT FIELD_ID
								FROM FIELD_OPTION
								WHERE ID = ASSOCIATION_REPORT_FIELD.FIELD_VALUE
							  )
							  AND FIELD_VALUE = '#thisItem#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_Contact_gt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_Contact_gt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_Contact_gt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM REPORT_CONTACT
							WHERE TYPE_ID = '#tempTypeID#'
							  AND QUANTITY > '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_Contact_lt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_Contact_lt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_Contact_lt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM REPORT_CONTACT
							WHERE TYPE_ID = '#tempTypeID#'
							  AND QUANTITY < '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_EthnicDemographic_gt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_EthnicDemographic_gt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_EthnicDemographic_gt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ETHNIC_DEMOGRAPHIC
							WHERE ETHNICITY_ID = '#tempTypeID#'
							GROUP BY REPORT_ID, ETHNICITY_ID
							HAVING
								<cfif criteriaStructure.param_ComparatorsUsePercentage>
									(
										EXISTS
										(
											<!--- face to face as denominator, check for zero --->
											SELECT QUANTITY
											FROM REPORT_CONTACT
											WHERE REPORT_ID = REPORT.ID
											  AND TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
										)
										AND
										0 <>
										(
											<!--- face to face as denominator, check for zero --->
											SELECT QUANTITY
											FROM REPORT_CONTACT
											WHERE REPORT_ID = REPORT.ID
											  AND TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
										)
									)
									AND
									(
										CAST(
											CAST(SUM(QUANTITY) AS float)
											/
											CAST(
												(
													<!--- face to face as denominator --->
													SELECT QUANTITY
													FROM REPORT_CONTACT
													WHERE REPORT_ID = REPORT.ID
													  AND TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
												)
										   AS float)
									  AS float)
									) * 100
								<cfelse>
									SUM(QUANTITY)
								</cfif>
								> '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_EthnicDemographic_lt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_EthnicDemographic_lt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_EthnicDemographic_lt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ETHNIC_DEMOGRAPHIC
							WHERE ETHNICITY_ID = '#tempTypeID#'
							GROUP BY REPORT_ID, ETHNICITY_ID
							HAVING SUM(QUANTITY) < '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_RacialDemographic_gt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_RacialDemographic_gt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_RacialDemographic_gt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM RACIAL_DEMOGRAPHIC
							WHERE RACE_ID = '#tempTypeID#'
							GROUP BY REPORT_ID, RACE_ID
							HAVING SUM(QUANTITY) > '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_RacialDemographic_lt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_RacialDemographic_lt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_RacialDemographic_lt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM RACIAL_DEMOGRAPHIC
							WHERE RACE_ID = '#tempTypeID#'
							GROUP BY REPORT_ID, RACE_ID
							HAVING SUM(QUANTITY) < '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_ResidenceDemographic_gt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_ResidenceDemographic_gt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_ResidenceDemographic_gt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM RESIDENCE_DEMOGRAPHIC
							WHERE TYPE_ID = '#tempTypeID#'
							  AND QUANTITY > '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_ResidenceDemographic_lt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_ResidenceDemographic_lt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_ResidenceDemographic_lt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM RESIDENCE_DEMOGRAPHIC
							WHERE TYPE_ID = '#tempTypeID#'
							  AND QUANTITY < '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_TargetAudience_gt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_TargetAudience_gt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_TargetAudience_gt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM TARGET_AUDIENCE
							WHERE TYPE_ID = '#tempTypeID#'
							  AND QUANTITY > '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_TargetAudience_lt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_TargetAudience_lt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_TargetAudience_lt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM TARGET_AUDIENCE
							WHERE TYPE_ID = '#tempTypeID#'
							  AND QUANTITY < '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_ReportField_gt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_ReportField_gt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_ReportField_gt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_FIELD
							WHERE FIELD_ID = '#tempTypeID#'
							  AND FIELD_VALUE > '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_OneOfReportFields_gt) and not structIsEmpty(criteriaStructure.criteria_OneOfReportFields_gt)>
					AND (
						1=2
					<cfloop list="#StructKeyList(criteriaStructure.criteria_OneOfReportFields_gt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_OneOfReportFields_gt[tempTypeID]>
						OR REPORT.ID IN (
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_FIELD
							WHERE FIELD_ID = '#tempTypeID#'
							  AND FIELD_VALUE > '#tempValue#'
						)
					</cfloop>
				)
				</cfif>
				<cfif IsStruct(criteriaStructure.criteria_ReportField_lt)>
					<cfloop list="#StructKeyList(criteriaStructure.criteria_ReportField_lt)#" index="tempTypeID">
						<cfset tempValue = criteriaStructure.criteria_ReportField_lt[tempTypeID]>
						AND REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_FIELD
							WHERE FIELD_ID = '#tempTypeID#'
							  AND FIELD_VALUE < '#tempValue#'
						)
					</cfloop>
				</cfif>
				<cfif criteriaStructure.criteria_PersonnelInvolved neq ''>
					AND
					(
						REPORT.OWNER_ID IN (#ListQualify(criteriaStructure.criteria_PersonnelInvolved,"'")#)
						OR
						REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM REPORT_PERSONNEL
							WHERE PERSONNEL_ID IN (#ListQualify(criteriaStructure.criteria_PersonnelInvolved,"'")#)
							  AND IS_REJECTED = 0
						)
					)
				</cfif>
				<cfif IsValid("BOOLEAN",criteriaStructure.criteria_EditorInCountyOffice)>
					AND
					(
						REPORT.OWNER_ID IN
						(
							SELECT ID
							FROM #application.DatabaseDSNs['CAES_CENTRAL_DATABASE']#..PERSONNEL
							WHERE COLLEGE_ID IN
							(
								SELECT CollegeID
								FROM #application.DatabaseDSNs['PORTAL']#..ContactInfo
								WHERE CountyOfficeID IS <cfif criteriaStructure.criteria_EditorInCountyOffice>NOT</cfif> NULL
							)
						)
					)
				</cfif>
				<cfif criteriaStructure.criteria_ACTIVITY_DISTRICT_eq neq ''>
					AND
					(
						REPORT.COUNTY_ID IN
						(
							SELECT CountyListID
							FROM #application.DatabaseDSNs['PORTAL']#..CountyList
							WHERE DistrictID IN
							(
								SELECT DeptID
								FROM #application.DatabaseDSNs['PORTAL']#..GroupList
								WHERE BudgetDept IN (#ListQualify(criteriaStructure.criteria_ACTIVITY_DISTRICT_eq,"'")#)
							)
						)
					)
				</cfif>
				<cfif listLen(criteriaStructure.criteria_DoesNotHaveProgramAreaAndPublicationType) eq 2>
					AND
					(
						REPORT.ID NOT IN
						(
							SELECT REPORT_ID
							FROM ASSOCIATION_REPORT_PROGRAM_AREA
							WHERE AREA_ID = '#ListGetAt(criteriaStructure.criteria_DoesNotHaveProgramAreaAndPublicationType,1)#'
						)
						AND REPORT.ID NOT IN
						(
							SELECT REPORT_ID
							FROM MEDIA_PRODUCTION
							WHERE TYPE_ID =  '#ListGetAt(criteriaStructure.criteria_DoesNotHaveProgramAreaAndPublicationType,2)#'
						)
					)
				</cfif>
				<cfif criteriaStructure.criteria_HasMediaProducedPublicationType neq ''>
					AND
					(
						REPORT.ID IN
						(
							SELECT REPORT_ID
							FROM MEDIA_PRODUCTION
							WHERE TYPE_ID IN (#ListQualify(criteriaStructure.criteria_HasMediaProducedPublicationType,"'")#)
						)
					)
				</cfif>
				<cfif IsValid("BOOLEAN",criteriaStructure.criteria_HasMediaProducedCitation)>
					AND
					(
						REPORT.ID <cfif criteriaStructure.criteria_HasMediaProducedCitation><cfelse>NOT</cfif> IN
						(
							SELECT REPORT_ID
							FROM MEDIA_PRODUCTION
							WHERE CITATION IS NOT NULL
							  AND CITATION <> ''
						)
					)
				</cfif>
				<cfif criteriaStructure.criteria_InvolvesMe neq ''>
					AND
					(
						<cfif criteriaStructure.criteria_InvolvesMe eq 'EditorOrCollaborator'>
							REPORT.OWNER_ID = '#Request.ActiveUser.Credentials.PERSONNEL_ID#'
							OR REPORT.ID IN
							(
								SELECT REPORT_ID
								FROM REPORT_PERSONNEL
								WHERE PERSONNEL_ID = '#Request.ActiveUser.Credentials.PERSONNEL_ID#'
								  AND IS_REJECTED = 0
							)
						<cfelseif criteriaStructure.criteria_InvolvesMe eq 'EditorOnly'>
							REPORT.OWNER_ID = '#Request.ActiveUser.Credentials.PERSONNEL_ID#'
						<cfelseif criteriaStructure.criteria_InvolvesMe eq 'NotInvolved'>
							REPORT.OWNER_ID <> '#Request.ActiveUser.Credentials.PERSONNEL_ID#'
							AND REPORT.ID NOT IN
							(
								SELECT REPORT_ID
								FROM REPORT_PERSONNEL
								WHERE PERSONNEL_ID = '#Request.ActiveUser.Credentials.PERSONNEL_ID#'
								  AND IS_REJECTED = 0
							)
						</cfif>
					)
				</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_ECH_gt)>
				  	<!--- TODO: find more reasonable reference than label for teaching hours ID--->
				  	AND #criteriaStructure.criteria_ECH_gt# <
					(
						SELECT SUM(CONTACTS.QUANTITY*TEACHING_HOURS.FIELD_VALUE)
						FROM SUB_REPORT
						INNER JOIN SUB_REPORT_CONTACT AS CONTACTS ON SUB_REPORT.ID = CONTACTS.SUB_REPORT_ID
							AND CONTACTS.TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
						INNER JOIN ASSOCIATION_SUB_REPORT_FIELD AS TEACHING_HOURS ON SUB_REPORT.ID = TEACHING_HOURS.SUB_REPORT_ID
							AND TEACHING_HOURS.FIELD_ID = #application.cached_struct_GC3_REPORT_FIELD_INDEXED_BY_LABEL["How Many Hours of Formal Instruction Each Participant Received From You"].ID#
						WHERE SUB_REPORT.REPORT_ID = REPORT.ID
					)
				</cfif>
				<cfif IsNumeric(criteriaStructure.criteria_CEU_gt)>
				  	<!--- TODO: find more reasonable reference than label for teaching hours ID--->
				  	AND #criteriaStructure.criteria_CEU_gt# <
					(
						SELECT SUM(CONTACTS.QUANTITY*CONTINUING_EDUCATION_UNIT.FIELD_VALUE)
						FROM SUB_REPORT
						INNER JOIN SUB_REPORT_CONTACT AS CONTACTS ON SUB_REPORT.ID = CONTACTS.SUB_REPORT_ID
							AND CONTACTS.TYPE_ID = #application.cached_struct_GC3_CONTACT_TYPE_INDEXED_BY_LABEL["Face To Face"].ID#
						INNER JOIN ASSOCIATION_SUB_REPORT_FIELD AS CONTINUING_EDUCATION_UNIT ON SUB_REPORT.ID = CONTINUING_EDUCATION_UNIT.SUB_REPORT_ID
							AND CONTINUING_EDUCATION_UNIT.FIELD_ID = #application.cached_struct_GC3_REPORT_FIELD_INDEXED_BY_LABEL["How Many Continuing Education Units (CEUs) Each Participant Received From You"].ID#
						WHERE SUB_REPORT.REPORT_ID = REPORT.ID
					)
				</cfif>
				<!--- RHT 06/27/14  Added per Sunshine --->
				<cfif isDefined('criteriaStructure.criteria_SUB_REPORT_ROLE_ID_eq') and criteriaStructure.criteria_SUB_REPORT_ROLE_ID_eq neq ''>
					AND REPORT.ID IN (
						SELECT REPORT_ID FROM SUB_REPORT
							INNER JOIN ASSOCIATION_SUB_REPORT_ROLE AS ASSOCIATION_SUB_REPORT_ROLE ON ASSOCIATION_SUB_REPORT_ROLE.SUB_REPORT_ID = SUB_REPORT.ID
							INNER JOIN SUB_REPORT_ROLE AS SUB_REPORT_ROLE ON SUB_REPORT_ROLE.ID = ASSOCIATION_SUB_REPORT_ROLE.ROLE_ID
						 WHERE
							SUB_REPORT_ROLE.ID IN (#ListQualify(criteriaStructure.criteria_SUB_REPORT_ROLE_ID_eq,"'")#)
						)
				</cfif>
				<!--- bjw 12/17/15  Added per Todd --->
				<cfif isDefined('criteriaStructure.criteria_ReportsBasedOnLogicModel_eq') and criteriaStructure.criteria_ReportsBasedOnLogicModel_eq neq ''>
					AND REPORT.ID IN (
						SELECT SUB_REPORT.REPORT_ID
						FROM SUB_REPORT
						INNER JOIN #application.DatabaseDSNs['FederalPOW']#..ASSOCIATION_MODEL_PLAN_DERIVATIVE_PLAN AS ampdp ON ampdp.DERIVATIVE_PLAN_ID = SUB_REPORT.PLANNED_PROGRAM_ID
						WHERE ampdp.MODEL_PLAN_ID IN (
							#ListQualify(criteriaStructure.criteria_ReportsBasedOnLogicModel_eq,"'")#
						)
					)
				</cfif>

				<!--- End Custom Criteria Implementations --->
			</cfsavecontent>
		</cfoutput>
		<cfreturn result>
		<!--- end function body --->
	</cffunction>

	<!--- End Query Functions --->

	<!--- Begin Custom Functions --->
	<cffunction access='public' name='ValidateReport' output='false' returntype='struct'>
		<cfargument name='param_DataQuery' type='query' required='yes'>
		<cfargument name="param_QueryNeedsConversion" type="boolean" required="no" default="false">
		<!--- begin function body --->
		<cfset var result = StructNew()>
		<cfset var tempBalancingContactVar = ''>
		<cfset var tempBalancingContactNumber = ''>
		<cfset var tempCriteriaStructure = ''>

		<cfset result.AnyWarnings = false>
		<cfset result.AnyErrors = false>

		<cfif param_DataQuery.RecordCount eq 0>
			<cfreturn result>
		</cfif>

		<cfif param_QueryNeedsConversion>
			<cfset tempCriteriaStructure = GC3_REPORT_PopulateCriteriaStructure()>
			<cfset tempCriteriaStructure.criteria_ID_eq = ValueList(param_DataQuery.ID)>
			<cfset tempCriteriaStructure.queryMode = "VALIDATION">
			<cfset param_DataQuery = GC3_REPORT_SelectQuery(tempCriteriaStructure)>
		</cfif>

		<cfloop query="param_DataQuery">
			<cfset result[param_DataQuery.ID] = StructNew()>
			<cfset result[param_DataQuery.ID].HasWarnings = false>
			<cfset result[param_DataQuery.ID].HasErrors = false>
			<cfset result[param_DataQuery.ID].MessageList = "">

			<!--- if report balances to a contact number --->
			<cfif IsNumeric(param_DataQuery.BALANCES_TO_CONTACT_TYPE)>
				<cfset tempBalancingContactVar = "param_DataQuery.CONTACT_TYPE_" & param_DataQuery.BALANCES_TO_CONTACT_TYPE & "_QUANTITY">

				<!--- if number missing --->
				<cfif not IsDefined(tempBalancingContactVar)>
					<cfset result[param_DataQuery.ID].HasWarnings = true>
					<cfset result.AnyWarnings = true>
					<cfset result[param_DataQuery.ID].MessageList = ListAppend(result[param_DataQuery.ID].MessageList,
						"No Face to Face contact number provided."
					)>
				<cfelse>
					<cfset tempBalancingContactNumber = evaluate(tempBalancingContactVar)>

					<!--- if number does not match racial demographics --->
					<cfif tempBalancingContactNumber neq param_DataQuery.RACIAL_TOTAL_QUANTITY>
						<cfset result[param_DataQuery.ID].HasWarnings = true>
						<cfset result.AnyWarnings = true>
						<cfset result[param_DataQuery.ID].MessageList = ListAppend(result[param_DataQuery.ID].MessageList,
							"Total of Racial Demographics (#param_DataQuery.RACIAL_TOTAL_QUANTITY#) does not equal Face To Face (#tempBalancingContactNumber#)."
						)>
					</cfif>

					<!--- if number does not match ethnic demographics --->
					<cfif tempBalancingContactNumber neq param_DataQuery.ETHNIC_TOTAL_QUANTITY>
						<cfset result[param_DataQuery.ID].HasWarnings = true>
						<cfset result.AnyWarnings = true>
						<cfset result[param_DataQuery.ID].MessageList = ListAppend(result[param_DataQuery.ID].MessageList,
							"Total of Ethnic Demographics (#param_DataQuery.ETHNIC_TOTAL_QUANTITY#) does not equal Face To Face (#tempBalancingContactNumber#)."
						)>
					</cfif>

					<!--- if number does not match residence demographics --->
					<cfif param_DataQuery.USES_RESIDENCE eq 1>
						<cfif tempBalancingContactNumber neq param_DataQuery.RESIDENCE_TOTAL_QUANTITY>
							<cfset result[param_DataQuery.ID].HasWarnings = true>
							<cfset result.AnyWarnings = true>
							<cfset result[param_DataQuery.ID].MessageList = ListAppend(result[param_DataQuery.ID].MessageList,
								"Total of Residence Demographics (#param_DataQuery.RESIDENCE_TOTAL_QUANTITY#) does not equal Face To Face (#tempBalancingContactNumber#)."
							)>
						</cfif>
					</cfif>

					<!--- if number does not match target audience demographics --->
					<cfif tempBalancingContactNumber neq param_DataQuery.TARGET_AUDIENCE_TOTAL_QUANTITY>
						<cfset result[param_DataQuery.ID].HasWarnings = true>
						<cfset result.AnyWarnings = true>
						<cfset result[param_DataQuery.ID].MessageList = ListAppend(result[param_DataQuery.ID].MessageList,
							"Total of Target Audience Demographics (#param_DataQuery.TARGET_AUDIENCE_TOTAL_QUANTITY#) does not equal Face To Face (#tempBalancingContactNumber#)."
						)>
					</cfif>

					<!--- if sub report exceeds report number --->
				</cfif>

			</cfif>

		</cfloop>

		<cfreturn result>
		<!--- end function body --->
	</cffunction>

	<cffunction access='public' name='GC3_ProcessReport' output='false' returntype='any'>
		<cfargument name="param_postedData" type="struct" required="yes" />
		<cfscript>
			// Variables to be used throughout report processing
			var dataObj = param_postedData;
			var returnObj = {
				success: true,
				messages: ''
			};
			var isNewReport = true;
			var mainRecordStructure = '';
			var subReportRecordStructure = '';
			var t_criteria = StructNew();
			var t_records = StructNew();
			var validInput = true;
			var messageCollection = '';
			var hasAssociatedDataArray = StructNew();
			var mediaProducedRecordStructure = StructNew();
			var mediaDistributedRecordStructure = StructNew();
			var mediaReviewedRecordStructure = StructNew();
			var mediaProducedKeyList = '';
			var mediaDistributedKeyList = '';
			var mediaReviewedKeyList = '';
			var subReportKeyList = '';
			var t_array = [];
			var t_object = StructNew();
			var t_record = StructNew();

			// Include required modules
			include '/GlobalResources/globalComponents/ServerAPI/Utility/Utility.cfm';
			include '/GlobalResources/globalComponents/ServerAPI/MessageHandling/MessageHandling.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/CAES_CENTRAL_DATABASE/KEYWORD.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/CAES_CENTRAL_DATABASE/PROGRAM_AREA.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/CAES_CENTRAL_DATABASE/TOPIC.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/GACOUNTS3/ASSOCIATION_REPORT_KEYWORD.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/GACOUNTS3/ASSOCIATION_REPORT_PROGRAM_AREA.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/GACOUNTS3/ASSOCIATION_REPORT_TOPIC.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/GACOUNTS3/ASSOCIATION_SUB_REPORT_ROLE.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/GACOUNTS3/REPORT_TYPE.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/GACOUNTS3/SUB_REPORT.cfm';
			include '/GlobalResources/globalComponents/DatabaseAPI/GACOUNTS3/SUB_REPORT_ROLE.cfm';

			// todo -- temp while in dev mode
			try {
				// Set up message collection
				messageCollection = GetNewMessageCollection();

				/*
					ASSUMPTIONS
					1. The following sections are correctly associated with report type,
					program areas, and topics:
						- report type
						- topics
						- keywords
						- demographic information (both report and sub-report)
						- supplemental data
						- media produced/distributed/reviewed
						- roles
					2. The following sections are correctly filtered by current user:
						- Default county
						- Working groups
						- Planned programs
				*/

				// valid-looking report object?
				// abort if not
				// TODO it would kinda be nice to have a function that took the dataObj and validated it as a valid schema.
				// TODO but I don't know how to write that, and it would take me a long time.
				// TODO We've always trusted that the front-end would send us valid form field names,
				// TODO so we can keep doing that I guess.
				if ( not StructKeyExists(dataObj, 'report')
					or not StructsHaveSameKeys(GC3_REPORT_PopulateObjectStructure(), dataObj.report, 'ExistsInDB')
				) {
					returnObj.success = false;
					AddMessageToMessageCollection(messageCollection, 'Improper report configuration. If this problem persists, please contact #application.systemAdministratorEmail#');
					returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
					return returnObj;
				} else mainRecordStructure = GC3_REPORT_PopulateObjectStructure(dataObj.report);

				// is this a new report?
				if (IsValid('integer', mainRecordStructure.ID)) isNewReport = false;

				// default some report fields
				if (mainRecordStructure.DATE_END eq '') mainRecordStructure.DATE_END = mainRecordStructure.DATE_BEGIN;
				if (
					mainRecordStructure.ACTIVITY_LOCATION_TYPE_ID neq ''
					and application.cached_struct_GC3_ACTIVITY_LOCATION_TYPE[mainRecordStructure.ACTIVITY_LOCATION_TYPE_ID]['USES_ALTERNATE_TEXT'] eq 1
					and mainRecordStructure.COUNTY_ID eq ''
				) {
					mainRecordStructure.COUNTY_ID = application.defaultCountyID;
				}

				// validate basic report fields
				validInput = GC3_REPORT_ValidateData(
					param_ObjectStructure=mainRecordStructure,
					param_FieldNames=StructKeyList(mainRecordStructure),
					param_ErrorMessageCollection=messageCollection
				);

				// We only want/need to check for valid program area/topic/report type
				// configuration when it's a new report, as an existing report is
				// assumed to already be valid because editing of these sections is not
				// allowed. So, save the processing time!
				if (isNewReport) {
					// at least one program area, report type, topic
					if (
						not StructMemberHasNonEmptyArray(dataObj, 'programAreas')
						or not StructMemberHasNonEmptyArray(dataObj, 'reportType')
						or not StructMemberHasNonEmptyArray(dataObj, 'topics')
						) {
							if (not StructMemberHasNonEmptyArray(dataObj, 'programAreas')) AddMessageToMessageCollection(messageCollection, 'You must select at least one Program Area.');
							if (not StructMemberHasNonEmptyArray(dataObj, 'reportType')) AddMessageToMessageCollection(messageCollection, 'You must select a Report Type.');
							if (not StructMemberHasNonEmptyArray(dataObj, 'topics')) AddMessageToMessageCollection(messageCollection, 'You must select at least one Topic for each selected Program Area.');
							returnObj.success = false;
							returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
							return returnObj;
						}

						// report type associated with selected program areas
						t_criteria = GC3_REPORT_TYPE_PopulateCriteriaStructure();
						t_criteria.criteria_AssociatedWithProgramArea = GetValueListFromRecordStruct(dataObj.programAreas.records, 'AREA_ID');
						t_criteria.criteria_ID_eq = GetValueListFromRecordStruct(dataObj.reportType.records, 'TYPE_ID');
						t_records = GC3_REPORT_TYPE_SelectQuery(t_criteria);
						if (t_records.RecordCount eq 0 ) {
							validInput = false;
							AddMessageToMessageCollection(messageCollection,'Selected Report Type is invalid.  If the problem persists, please contact #application.SystemAdministratorEmail#.');
						}

						// at least 1 associated topic per program area
						t_criteria = CCD_PROGRAM_AREA_PopulateCriteriaStructure();
						t_criteria.criteria_ID_eq = GetValueListFromRecordStruct(dataObj.programAreas.records, 'AREA_ID');
						t_records = CCD_PROGRAM_AREA_SelectQuery(t_criteria);
						if (t_records.RecordCount eq 0) {
							validInput = false;
							AddMessageToMessageCollection(messageCollection, 'Selected Program Areas are invalid.  If the problem persists, please contact #application.SystemAdministratorEmail#.');
							} else {
								// for each program area, find a db association to one of the selected topics
								for (programArea in t_records) {
									t_criteria = CCD_TOPIC_PopulateCriteriaStructure();
									t_criteria.criteria_ID_eq = GetValueListFromRecordStruct(dataObj.topics.records, 'TOPIC_ID');
									t_criteria.criteria_AssociatedWithProgramArea = programArea.ID;
									t_records = CCD_TOPIC_SelectQuery(t_criteria);
									if (t_records.RecordCount eq 0) {
										validInput = false;
										AddMessageToMessageCollection(messageCollection, 'You must select at least one topic that applies to the #programArea.LABEL# Program Area.');
									}
								}
							}
				}

				// at least one keyword, not more than maxKeywordsPerReport
				if (validInput) {
					if (ArrayLen(dataObj.keywords.records) eq 0) {
						validInput = false;
						AddMessageToMessageCollection(messageCollection, 'You must select at least one keyword.');
					} else if (ArrayLen(dataObj.keywords.records) gt application.maxKeywordsPerReport) {
						validInput = false;
						AddMessageToMessageCollection(messageCollection, 'You may not select more than #application.maxKeywordsPerReport# keywords.');
					} else {
					}
				}

				// valid-looking sub-report object?
				// abort if not
				if (not StructKeyExists(dataObj, 'subschemas')
					or not StructKeyExists(dataObj.subschemas, 'subReport')
					or not StructKeyExists(dataObj.subschemas.subReport, 'subReport')
					or not StructsHaveSameKeys(GC3_SUB_REPORT_PopulateObjectStructure(), dataObj.subschemas.subReport.subReport, 'ExistsInDB')
				) {
					returnObj.success = false;
					AddMessageToMessageCollection(messageCollection, 'Improper sub-report configuration. If this problem persists, please contact #application.systemAdministratorEmail#');
					returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
					return returnObj;
				} else subReportRecordStructure = GC3_SUB_REPORT_PopulateObjectStructure(dataObj.subschemas.subReport.subReport);

				// either personal plan or state plan for sub-report
				if (
					not IsValid("integer",subReportRecordStructure.PLANNED_PROGRAM_ID)
					and not IsValid("integer",subReportRecordStructure.STATE_PLANNED_PROGRAM_ID)
				) {
					validInput = false;
					AddMessageToMessageCollection(messageCollection, 'You must select either a State Issue or a Local Issue.');
				}

				// either a State Issue or a Local Issue, but not both, for sub-report
				if (subReportRecordStructure.ISSUE_TYPE eq 'local' and IsValid('integer', subReportRecordStructure.STATE_PLANNED_PROGRAM_ID)) {
					subReportRecordStructure.STATE_PLANNED_PROGRAM_ID = '';
				}
				if (subReportRecordStructure.ISSUE_TYPE eq 'state' and IsValid('integer', subReportRecordStructure.PLANNED_PROGRAM_ID)) {
					subReportRecordStructure.PLANNED_PROGRAM_ID = '';
				}

				// Set some defaults for the sub-report
				subReportRecordStructure.IS_HIGHLIGHTED = false;

				// Validate subreport structure
				// param_FieldNames is set as such to not check for a valid report ID,
				// as we do not yet have a report ID, but want to do all validation
				// before any writing.
				subReportKeyList = StructKeyList(subReportRecordStructure);
				validInput = validInput and GC3_SUB_REPORT_ValidateData(
					param_ObjectStructure = subReportRecordStructure,
					param_FieldNames = ListDeleteAt(subReportKeyList, ListFind(subReportKeyList, 'REPORT_ID')),
					param_ErrorMessageCollection = messageCollection
				);

				// sub-report must have at least one role
				if ( ArrayLen(dataObj.subschemas.subReport.roles.records) eq 0 ) {
					validInput = false;
					AddMessageToMessageCollection(messageCollection, 'You must select at least one Sub-Report Role.');
				}

				// report contacts numeric and > 0
				if (
					isDefined('dataObj.contacts.records')
					and isArray(dataObj.contacts.records)
					and ArrayLen(dataObj.contacts.records) gt 0
				) {
					hasAssociatedDataArray["contacts"] = true;
					for (record in dataObj.contacts.records) {
						if ( structKeyExists(record,"QUANTITY") ) {
							if ( record.QUANTITY neq '' and (not isValid("integer",record.QUANTITY) or record.QUANTITY lt 0) ) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, 'Report Contacts must be numeric and greater than zero.');
								break;
							}
						}
					}
				} else {
					hasAssociatedDataArray["contacts"] = false;
				}

				// sub-report contacts numeric and > 0
				if ( isDefined('dataObj.subschemas.subReport.contacts.records')
					and isArray(dataObj.subschemas.subReport.contacts.records)
					and ArrayLen(dataObj.subschemas.subReport.contacts.records) gt 0
				) {
					hasAssociatedDataArray["subReportContacts"] = true;
					for (record in dataObj.subschemas.subReport.contacts.records) {
						if ( structKeyExists(record,"QUANTITY") ) {
							if ( record.QUANTITY neq '' and (not isValid("integer",record.QUANTITY) or record.QUANTITY lt 0) ) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, 'Sub-Report Contacts must be numeric and greater than zero.');
								break;
							}
						}
					}
				} else hasAssociatedDataArray["subReportContacts"] = false;

				// target audiences numeric and > 0
				if ( isDefined('dataObj.targetAudiences.records')
					and isArray(dataObj.targetAudiences.records)
					and ArrayLen(dataObj.targetAudiences.records) gt 0
				) {
					hasAssociatedDataArray["targetAudiences"] = true;
					for (record in dataObj.targetAudiences.records) {
						if ( structKeyExists(record,"QUANTITY") ) {
							if ( record.QUANTITY neq '' and (not isValid("integer",record.QUANTITY) or record.QUANTITY lt 0) ) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, 'Target Audience numbers must be numeric and greater than zero.');
								break;
							}
						}
					}
				} else hasAssociatedDataArray["targetAudiences"] = false;

				// residence types numeric and > 0
				if ( isDefined('dataObj.residenceDemographics.records')
					and isArray(dataObj.residenceDemographics.records)
					and ArrayLen(dataObj.residenceDemographics.records) gt 0
				) {
					hasAssociatedDataArray["residenceDemographics"] = true;
					for (record in dataObj.residenceDemographics.records) {
						if ( structKeyExists(record,"QUANTITY") ) {
							if ( record.QUANTITY neq '' and (not isValid("integer",record.QUANTITY) or record.QUANTITY lt 0) ) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, 'Residence Demographics must be numeric and greater than zero.');
								break;
							}
						}
					}
				} else hasAssociatedDataArray["residenceDemographics"] = false;

				// race (male and female) numeric and > 0
				if ( isDefined('dataObj.racialDemographics.records')
					and isArray(dataObj.racialDemographics.records)
					and ArrayLen(dataObj.racialDemographics.records) gt 0
				) {
					hasAssociatedDataArray["racialDemographics"] = true;
					for (record in dataObj.racialDemographics.records) {
						if ( structKeyExists(record,"QUANTITY_MALE") ) {
							if ( record.QUANTITY_MALE neq '' and (not isValid("integer",record.QUANTITY_MALE) or record.QUANTITY_MALE lt 0) ) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, 'Racial Demographics (Male) must be numeric and greater than zero.');
								break;
							}
						}
						if ( structKeyExists(record,"QUANTITY_FEMALE") ) {
							if ( record.QUANTITY_FEMALE neq '' and (not isValid("integer",record.QUANTITY_FEMALE) or record.QUANTITY_FEMALE lt 0) ) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, 'Racial Demographics (Female) must be numeric and greater than zero.');
								break;
							}
						}
					}
				} else hasAssociatedDataArray["racialDemographics"] = false;

				// ethnicity numeric and > 0
				if ( isDefined('dataObj.ethnicDemographics.records')
					and isArray(dataObj.ethnicDemographics.records)
					and ArrayLen(dataObj.ethnicDemographics.records) gt 0
				) {
					hasAssociatedDataArray["ethnicDemographics"] = true;
					for (record in dataObj.racialDemographics.records) {
						if ( structKeyExists(record,"QUANTITY_MALE") ) {
							if ( record.QUANTITY_MALE neq '' and (not isValid("integer",record.QUANTITY_MALE) or record.QUANTITY_MALE lt 0) ) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, 'Ethnic Demographics (Male) must be numeric and greater than zero.');
								break;
							}
						}
						if ( structKeyExists(record,"QUANTITY_FEMALE") ) {
							if ( record.QUANTITY_FEMALE neq '' and (not isValid("integer",record.QUANTITY_FEMALE) or record.QUANTITY_FEMALE lt 0) ) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, 'Ethnic Demographics (Female) must be numeric and greater than zero.');
								break;
							}
						}
					}
				} else hasAssociatedDataArray["ethnicDemographics"] = false;


				// supplemental data, make sure that input matches type of field
				// pretty useless!
				if (
					isDefined('dataObj.supplementalData.records')
					and isArray(dataObj.supplementalData.records)
					and ArrayLen(dataObj.supplementalData.records) gt 0
				) {
					hasAssociatedDataArray["supplementalData"] = true;
					for (record in dataObj.supplementalData.records) {
						if (
							not structKeyExists(application.cached_struct_GC3_REPORT_FIELD,record.FIELD_ID)
							or not isDefined('record.FIELD_VALUE')
							or record.FIELD_VALUE eq ''
						) {
							// ignore input if we don't know this field ID or if no value
						} else {
							/*
								ideally we'd check to see if this field was required
								but... it would require checking the ASSOCIATION_REPORT_TYPE_FIELD table which isn't in memory
								and... no fields are actually required as of 8/4/18 anyway

								if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_IS_REQUIRED_FOR_REPORT
									and (
										not isDefined('record.FIELD_VALUE')
										or record.FIELD_VALUE eq ''
									)
								) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection, 'Field #application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL# is required.');
								}
							*/

							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "Option Data" ) {
								if ( not IsValid("integer",record.FIELD_VALUE) or record.FIELD_VALUE LT 1 ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid option.");
								}
							}
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "Integer Data" ) {
								if ( not IsValid("integer",record.FIELD_VALUE) or not IsNumeric(record.FIELD_VALUE) or REFind("[$,]",record.FIELD_VALUE) neq 0 ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value '#record.FIELD_VALUE#' for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid integer.");
								}
							}
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "Decimal Data" ) {
								if ( not IsNumeric(record.FIELD_VALUE) or REFind("[$,]",record.FIELD_VALUE) neq 0 ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value '#record.FIELD_VALUE#' for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid number.");
								}
							}
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "String Data" ) {
								if ( not IsValid("string",record.FIELD_VALUE) ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value '#record.FIELD_VALUE#' for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid string.");
								}
							}
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "Boolean Data" ) {
								if ( not IsValid("boolean",record.FIELD_VALUE) ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid boolean value.");
								}
							}
						}
					}
				} else {
					hasAssociatedDataArray["supplementalData"] = false;
				}

				// Sub-report Supplemental Data
				if (
					isDefined('dataObj.subschemas.subReport.supplementalData.records')
					and isArray(dataObj.subschemas.subReport.supplementalData.records)
					and ArrayLen(dataObj.subschemas.subReport.supplementalData.records) gt 0
				) {
					hasAssociatedDataArray["subReportSupplementalData"] = true;
					for (record in dataObj.subschemas.subReport.supplementalData.records) {
						if (
							not structKeyExists(application.cached_struct_GC3_REPORT_FIELD,record.FIELD_ID)
							or not isDefined('record.FIELD_VALUE')
							or record.FIELD_VALUE eq ''
						) {
							// ignore input if we don't know this field ID or if no value
						} else {
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "Option Data" ) {
								if ( not IsValid("integer",record.FIELD_VALUE) or record.FIELD_VALUE LT 1 ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid option.");
								}
							}
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "Integer Data" ) {
								if ( not IsValid("integer",record.FIELD_VALUE) or not IsNumeric(record.FIELD_VALUE) or REFind("[$,]",record.FIELD_VALUE) neq 0 ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value '#record.FIELD_VALUE#' for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid integer.");
								}
							}
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "Decimal Data" ) {
								if ( not IsNumeric(record.FIELD_VALUE) or REFind("[$,]",record.FIELD_VALUE) neq 0 ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value '#record.FIELD_VALUE#' for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid number.");
								}
							}
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "String Data" ) {
								if ( not IsValid("string",record.FIELD_VALUE) ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value '#record.FIELD_VALUE#' for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid string.");
								}
							}
							if ( application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].FIELD_TYPE_LABEL eq "Boolean Data" ) {
								if ( not IsValid("boolean",record.FIELD_VALUE) ) {
									validInput = false;
									AddMessageToMessageCollection(messageCollection,"Value for field '#application.cached_struct_GC3_REPORT_FIELD[record.FIELD_ID].LABEL#' was not a valid boolean value.");
								}
							}
						}
					}
				} else {
					hasAssociatedDataArray["subReportSupplementalData"] = false;
				}

				// media produced
				if (
					isDefined('dataObj.mediaProduced.records')
					and isArray(dataObj.mediaProduced.records)
					and ArrayLen(dataObj.mediaProduced.records) gt 0
				) {
					hasAssociatedDataArray['mediaProduced'] = true;
					for (record in dataObj.mediaProduced.records) {
						if (not StructsHaveSameKeys(GC3_MEDIA_PRODUCTION_PopulateObjectStructure(), record, 'ExistsInDB')) {
							returnObj.success = false;
							AddMessageToMessageCollection(messageCollection, 'Improper media production configuration. If this problem persists, please contact #application.systemAdministratorEmail#');
							returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
							return returnObj;
						} else {
							mediaProducedRecordStructure = GC3_MEDIA_PRODUCTION_PopulateObjectStructure(record);
							mediaProducedRecordStructure.STATUS_ID = 3;	// Default to published

							// validate basic report fields
							mediaProducedKeyList = StructKeyList(mediaProducedRecordStructure);
							mediaProducedKeyList = ListDeleteAt(mediaProducedKeyList, ListFind(mediaProducedKeyList, 'REPORT_ID'));
							validInput = validInput and GC3_MEDIA_PRODUCTION_ValidateData(
								param_ObjectStructure=mediaProducedRecordStructure,
								param_FieldNames=mediaProducedKeyList,
								param_ErrorMessageCollection=messageCollection
							);
						}
					}
				} else {
					hasAssociatedDataArray['mediaProduced'] = false;
				}

				// media distributed
				if (
					isDefined('dataObj.mediaDistributed.records')
					and isArray(dataObj.mediaDistributed.records)
					and ArrayLen(dataObj.mediaDistributed.records) gt 0
				) {
					hasAssociatedDataArray['mediaDistributed'] = true;
					t_array = [];
					for (record in dataObj.mediaDistributed.records) {
						if (not StructsHaveSameKeys(GC3_MEDIA_DISTRIBUTED_PopulateObjectStructure(), record, 'ExistsInDB')) {
							returnObj.success = false;
							AddMessageToMessageCollection(messageCollection, 'Improper media distribution configuration. If this problem persists, please contact #application.systemAdministratorEmail#');
							returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
							return returnObj;
						} else {
							mediaDistributedRecordStructure = GC3_MEDIA_DISTRIBUTION_PopulateObjectStructure(record);

							// validate basic report fields
							mediaDistributedKeyList = StructKeyList(mediaDistributedRecordStructure);
							mediaDistributedKeyList = ListDeleteAt(mediaDistributedKeyList, ListFind(mediaDistributedKeyList, 'REPORT_ID'));
							validInput = validInput and GC3_MEDIA_DISTRIBUTION_ValidateData(
								param_ObjectStructure=mediaDistributedRecordStructure,
								param_FieldNames=mediaDistributedKeyList,
								param_ErrorMessageCollection=messageCollection
							);

							// Check if media category has already been used
							if (ArrayFind(t_array, mediaDistributedRecordStructure.CATEGORY_ID)) {
								validInput = false;
								AddMessageToMessageCollection(messageCollection, "You cannot have two media distributions of the same category in one report. Please ensure that the quantity of unique works and circulation counts for each category encompass all relevant media distribution.");
							} else {
								ArrayAppend(t_array, mediaDistributedRecordStructure.CATEGORY_ID);
							}
						}
					}
				} else {
					hasAssociatedDataArray['mediaDistributed'] = false;
				}

				// media reviewed
				if (
					isDefined('dataObj.mediaReviewed.records')
					and isArray(dataObj.mediaReviewed.records)
					and ArrayLen(dataObj.mediaReviewed.records) gt 0
				) {
					hasAssociatedDataArray['mediaReviewed'] = true;
					for (record in dataObj.mediaReviewed.records) {
						if (not StructsHaveSameKeys(GC3_MEDIA_REVIEW_PopulateObjectStructure(), record, 'ExistsInDB')) {
							returnObj.success = false;
							AddMessageToMessageCollection(messageCollection, 'Improper media review configuration. If this problem persists, please contact #application.systemAdministratorEmail#');
							returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
							return returnObj;
						} else {
							mediaReviewedRecordStructure = GC3_MEDIA_REVIEW_PopulateObjectStructure(record);

							// validate basic report fields
							mediaReviewedKeyList = StructKeyList(mediaReviewedRecordStructure);
							mediaReviewedKeyList = ListDeleteAt(mediaReviewedKeyList, ListFind(mediaReviewedKeyList, 'REPORT_ID'));
							validInput = validInput and GC3_MEDIA_REVIEWED_ValidateData(
								param_ObjectStructure=mediaReviewedRecordStructure,
								param_FieldNames=mediaReviewedKeyList,
								param_ErrorMessageCollection=messageCollection
							);
						}
					}
				} else {
					hasAssociatedDataArray['mediaReviewed'] = false;
				}

				// SubReport Outcome, Impact, Achievements
				if (
					isDefined('dataObj.subschemas.subreport.outcomeImpactAndAchievements.records')
					and isArray(dataObj.subschemas.subreport.outcomeImpactAndAchievements.records)
					and ArrayLen(dataObj.subschemas.subreport.outcomeImpactAndAchievements.records) gt 0
					and StructKeyExists(dataObj.subschemas.subreport.outcomeImpactAndAchievements.records[1], 'MEMO')
					and dataObj.subschemas.subreport.outcomeImpactAndAchievements.records[1].MEMO neq ''
				) {
					hasAssociatedDataArray['outcomeImpactAndAchievements'] = true;
				} else {
					hasAssociatedDataArray['outcomeImpactAndAchievements'] = false;
				}

				// Collaborators
				if (
					isDefined('dataObj.collaborators.records')
					and isArray(dataObj.collaborators.records)
					and ArrayLen(dataObj.collaborators.records) gt 0
				) {
					hasAssociatedDataArray['collaborators'] = true;
				} else {
					hasAssociatedDataArray['collaborators'] = false;
				}

				// now the fun part
				// process input
				// REPORT
				if (false and validInput) {
					// Write the report
					GC3_REPORT_WriteQuery(
						objectStructure = mainRecordStructure,
						insertIfDoesNotExist = true
					);
					// Only continue if report is actually in the DB now
					if (not mainRecordStructure.ExistsInDB) {
						// Report not entered into DB, so we're in an error state
						AddMessageToMessageCollection(messageCollection, 'Something went wrong on our end and your report could not be saved.  If the problem persists, please contact #application.SystemAdministratorEmail#');
						returnObj.success = false;
						returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
						return returnObj;
					} else {
						// We have a valid report ID, so continue on
						// Sub-Report
						subReportRecordStructure.REPORT_ID = mainRecordStructure.ID;
						SaveStructure('GC3_SUB_REPORT', subReportRecordStructure);

						// Only need to insert program areas, topics, report type, and owner
						// as collaborator when working with a new report
						if (isNewReport) {
							// Program Areas
							for (programAreaRecord in dataObj.programAreas.records) {
								t_object = GC3_ASSOCIATION_REPORT_PROGRAM_AREA_PopulateObjectStructure(programAreaRecord);
								t_object.REPORT_ID = mainRecordStructure.ID;
								SaveStructure('GC3_ASSOCIATION_REPORT_PROGRAM_AREA', t_object);
							}

							// Topics
							for (topicRecord in dataObj.topics.records) {
								t_object = GC3_ASSOCIATION_REPORT_TOPIC_PopulateObjectStructure(topicRecord);
								t_object.REPORT_ID = mainRecordStructure.ID;
								SaveStructure('GC3_ASSOCIATION_REPORT_TOPIC', t_object);
							}

							// Report Type
							// Report type table allows multiple report types per report, we
							// actually only want to insert one per report.
							t_object = GC3_ASSOCIATION_REPORT_TYPE_PopulateObjectStructure(dataObj.reportType.records[1]);
							t_object.REPORT_ID = mainRecordStructure.ID;
							SaveStructure('GC3_ASSOCIATION_REPORT_TYPE', t_object);

							// Insert owner as collaborator
							t_object = GC3_REPORT_PERSONNEL_PopulateObjectStructure();
							t_object.REPORT_ID = mainRecordStructure.ID;
							t_object.PERSONNEL_ID = Request.ActiveUser.Credentials.PERSONNEL_ID;
							t_object.IS_REJECTED = 0;
							SaveStructure('GC3_REPORT_PERSONNEL', t_object);
						}

						// Keywords
						// Only delete existing if not working with a new report
						if (not isNewReport) {
							t_criteria = GC3_ASSOCIATION_REPORT_KEYWORD_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_ASSOCIATION_REPORT_KEYWORD_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						for (t_record in dataObj.keywords.records) {
							t_object = GC3_ASSOCIATION_REPORT_KEYWORD_PopulateObjectStructure(t_record);
							t_object.REPORT_ID = mainRecordStructure.ID;
							SaveStructure('GC3_ASSOCIATION_REPORT_KEYWORD', t_object);
						}

						// Report Contacts
						if (not isNewReport) {
							t_criteria = GC3_REPORT_CONTACT_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_REPORT_CONTACT_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						for (t_record in dataObj.contacts.records) {
							if (t_record.QUANTITY neq '' and t_record.QUANTITY gt 0) {
								t_object = GC3_REPORT_CONTACT_PopulateObjectStructure(t_record);
								t_object.REPORT_ID = mainRecordStructure.ID;
								SaveStructure('GC3_REPORT_CONTACT', t_object);
							}
						}

						// Target Audiences
						if (not isNewReport) {
							t_criteria = GC3_TARGET_AUDIENCE_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_TARGET_AUDIENCE_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						for (t_record in dataObj.targetAudiences.records) {
							if (t_record.QUANTITY neq '' and t_record.QUANTITY gt 0) {
								t_object = GC3_TARGET_AUDIENCE_PopulateObjectStructure(t_record);
								t_object.REPORT_ID = mainRecordStructure.ID;
								SaveStructure('GC3_TARGET_AUDIENCE', t_object);
							}
						}

						// Racial Demographics
						if (not isNewReport) {
							t_criteria = GC3_RACIAL_DEMOGRAPHIC_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_RACIAL_DEMOGRAPHIC_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						for (t_record in dataObj.racialDemographics.records) {
							if (t_record.QUANTITY neq '' and t_record.QUANTITY gt 0) {
								t_object = GC3_RACIAL_DEMOGRAPHIC_PopulateObjectStructure(t_record);
								t_object.REPORT_ID = mainRecordStructure.ID;
								SaveStructure('GC3_RACIAL_DEMOGRAPHIC', t_object);
							}
						}

						// Ethnic Demographics
						if (not isNewReport) {
							t_criteria = GC3_ETHNIC_DEMOGRAPHIC_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_ETHNIC_DEMOGRAPHIC_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						for (t_record in dataObj.ethnicDemographics.records) {
							if (t_record.QUANTITY neq '' and t_record.QUANTITY gt 0) {
								t_object = GC3_ETHNIC_DEMOGRAPHIC_PopulateObjectStructure(t_record);
								t_object.REPORT_ID = mainRecordStructure.ID;
								SaveStructure('GC3_ETHNIC_DEMOGRAPHIC', t_object);
							}
						}

						// Residence Demographics
						if (not isNewReport) {
							t_criteria = GC3_RESIDENCE_DEMOGRAPHIC_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_RESIDENCE_DEMOGRAPHIC_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						for (t_record in dataObj.residenceDemographics.records) {
							if (t_record.QUANTITY neq '' and t_record.QUANTITY gt 0) {
								t_object = GC3_RESIDENCE_DEMOGRAPHIC_PopulateObjectStructure(t_record);
								t_object.REPORT_ID = mainRecordStructure.ID;
								SaveStructure('GC3_RESIDENCE_DEMOGRAPHIC', t_object);
							}
						}

						// Supplemental Data
						for (t_record in dataObj.supplementalData.records) {
							if (t_record.FIELD_VALUE neq '') {
								t_object = GC3_ASSOCIATION_REPORT_FIELD_PopulateObjectStructure(t_record);
								t_object.REPORT_ID = mainRecordStructure.ID;
								SaveStructure('GC3_ASSOCIATION_REPORT_FIELD', t_object);
							} else if (not isNewReport and t_record.FIELD_VALUE eq '' and not t_record.IS_STRING_DATA) {
								// if submitted value is blank, and field type is not string,
								// must delete value record
								t_criteria = GC3_ASSOCIATION_REPORT_FIELD_PopulateCriteriaStructure();
								t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
								t_criteria.criteria_FIELD_ID_eq = t_record.FIELD_ID;
								GC3_ASSOCIATION_REPORT_FIELD_DeleteQuery(t_criteria);
							}
						}

						// Media Produced
						// TODO: Wrap this entire block inside a check for the report type
						// qualifying for media production
						if (not isNewReport and ArrayLen(dataObj.mediaProduced.records) eq 0) {
							t_criteria = GC3_MEDIA_PRODUCTION_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_MEDIA_PRODUCTION_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						// mediaProduced.records is an array, but we only ever want to allow
						// one mediaProduction record per report, so we're only going to
						// process the first item in the array.
						if (ArrayLen(dataObj.mediaProduced.records) gt 0) {
							t_record = dataObj.mediaProduced.records[1];
							t_object = GC3_MEDIA_PRODUCTION_PopulateObjectStructure(t_record);
							t_object.REPORT_ID = mainRecordStructure.ID;
							SaveStructure('GC3_MEDIA_PRODUCTION', t_object);
						}

						// Media Distributed
						if (not isNewReport) {
							t_criteria = GC3_MEDIA_DISTRIBUTED_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_MEDIA_DISTRIBUTED_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						for (t_record in dataObj.mediaDistributed.records) {
							t_object = GC3_MEDIA_DISTRIBUTED_PopulateObjectStructure(t_record);
							t_object.REPORT_ID = mainRecordStructure.ID;
							SaveStructure('GC3_MEDIA_DISTRIBUTED', t_object);
						}

						// Media Reviewed
						if (not isNewReport) {
							t_criteria = GC3_MEDIA_REVIEW_PopulateCriteriaStructure();
							t_criteria.criteria_REPORT_ID_eq = mainRecordStructure.ID;
							GC3_MEDIA_REVIEW_DeleteQuery(
								criteriaStructure = t_criteria,
								deleteMultiple = true
							);
						}
						for (t_record in dataObj.mediaDistributed.records) {
							t_object = GC3_MEDIA_REVIEW_PopulateObjectStructure(t_record);
							t_object.REPORT_ID = mainRecordStructure.ID;
							SaveStructure('GC3_MEDIA_REVIEW', t_object);
						}
					}
				}

				// Collaborators
				if (isNewReport) {
					for (t_record in dataObj.collaborators.records) {
						t_object = GC3_REPORT_PERSONNEL_PopulateObjectStructure(t_record);
						t_object.REPORT_ID = mainRecordStructure.ID;
						SaveStructure('GC3_REPORT_PERSONNEL', t_object);
					}
				}

				// ROLES
				/*
				<!--- retrieve currently associated items --->
				<cfset related_criteria = GC3_ASSOCIATION_SUB_REPORT_ROLE_PopulateCriteriaStructure()>
				<cfset related_criteria.criteria_SUB_REPORT_ID_eq = subReport_record.ID>
				<cfset related_records = GC3_ASSOCIATION_SUB_REPORT_ROLE_SelectQuery(related_criteria)>
				<cfset relatedItemIDList = ValueList(related_records.ROLE_ID)>

				<!--- if necessary, remove items no longer checked --->
				<cfloop query="related_records">
					<cfset thisItem = related_records.ROLE_ID>
					<cfif listFindNoCase(formInput.selectedRoleIDList,thisItem) eq 0>
						<cfset delete_criteria = GC3_ASSOCIATION_SUB_REPORT_ROLE_PopulateCriteriaStructure()>
						<cfset delete_criteria.criteria_SUB_REPORT_ID_eq = subReport_record.ID>
						<cfset delete_criteria.criteria_ROLE_ID_eq = thisItem>
						<cfset GC3_ASSOCIATION_SUB_REPORT_ROLE_DeleteQuery(delete_criteria)>
					</cfif>
				</cfloop>

				<!--- if necessary, add items now checked --->
				<cfloop list="#formInput.selectedRoleIDList#" index="thisItem">
					<cfif listFindNoCase(relatedItemIDList,thisItem) eq 0>
						<cfset new_object = GC3_ASSOCIATION_SUB_REPORT_ROLE_PopulateObjectStructure()>
						<cfset new_object.SUB_REPORT_ID = subReport_record.ID>
						<cfset new_object.ROLE_ID = thisItem>
						<cfset SaveStructure("GC3_ASSOCIATION_SUB_REPORT_ROLE",new_object)>
					</cfif>
				</cfloop>
				*/

				// SUB_REPORT CONTACTS
				/*
				<cfset value_object = GC3_SUB_REPORT_CONTACT_PopulateObjectStructure()>
				<cfset value_object.SUB_REPORT_ID = subReport_record.ID>
				<cfset value_object.TYPE_ID = contactType_records.ID>
				<cfset value_object.QUANTITY = thisItemQuantity>
				<cfset SaveStructure("GC3_SUB_REPORT_CONTACT",value_object)>
				*/


				// SUB-REPORT SUPPLEMENTAL DATA
				/*
				<cfif thisFieldValue eq "" and ReportField_records.FIELD_TYPE_LABEL neq "String Data">
					<!--- if submitted value is blank, and field type is not string, must delete value record --->
					<cfset value_criteria = GC3_ASSOCIATION_SUB_REPORT_FIELD_PopulateCriteriaStructure()>
					<cfset value_criteria.criteria_SUB_REPORT_ID_eq = subReport_record.ID>
					<cfset value_criteria.criteria_FIELD_ID_eq = ReportField_records.ID>
					<cfset GC3_ASSOCIATION_SUB_REPORT_FIELD_DeleteQuery(value_criteria)>
				<cfelse>
					<cfset value_object = GC3_ASSOCIATION_SUB_REPORT_FIELD_PopulateObjectStructure()>
					<cfset value_object.SUB_REPORT_ID = subReport_record.ID>
					<cfset value_object.FIELD_ID = subReportField_records.ID>
					<cfset value_object.FIELD_VALUE = thisFieldValue>
					<cfset SaveStructure("GC3_ASSOCIATION_SUB_REPORT_FIELD",value_object)>
				</cfif>
				*/

				// return!
				returnObj.success = validInput;
				returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
				return returnObj;

				// todo -- temp while in dev mode, it's useful to send caught msg back to front-end
				// once on production, need to catch, log in our database, then show user 500 error page?
				// or will 500 on back end automatically be caught by our error handler in devMode=false?
			} catch (any e) {
				returnObj.messages = serializeJSON(e);
				return returnObj.messages;

				/* do this?
				AddMessageToMessageCollection(messageCollection, 'An unspecified internal error occured. If the problem persists, please contact #application.SystemAdministratorEmail#');
				returnObj.success = false;
				returnObj.messages = GetMessageCollectionHTML(messageCollection = messageCollection, messageDisplayClass = '');
				*/
			}
		</cfscript>
	</cffunction>
	<!--- End Custom Functions --->
